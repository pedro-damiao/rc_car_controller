
rc_car_controller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000026dc  080001c4  080001c4  000011c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  080028a0  080028a0  000038a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080028b8  080028b8  00004004  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080028b8  080028b8  000038b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080028c0  080028c0  00004004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080028c0  080028c0  000038c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080028c4  080028c4  000038c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000004  20000000  080028c8  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000004  080028cc  00004004  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000024  080028cc  00004024  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00004004  2**0
                  CONTENTS, READONLY
 12 .debug_info   00006f6a  00000000  00000000  00004034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001a14  00000000  00000000  0000af9e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000008c8  00000000  00000000  0000c9b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000066d  00000000  00000000  0000d280  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001ed56  00000000  00000000  0000d8ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000070ad  00000000  00000000  0002c643  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a40dc  00000000  00000000  000336f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d77cc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000023a4  00000000  00000000  000d7810  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000094  00000000  00000000  000d9bb4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	@ (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000004 	.word	0x20000004
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08002888 	.word	0x08002888

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	@ (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	@ (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	@ (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000008 	.word	0x20000008
 8000200:	08002888 	.word	0x08002888

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b988 	b.w	800052c <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9d08      	ldr	r5, [sp, #32]
 800023a:	468e      	mov	lr, r1
 800023c:	4604      	mov	r4, r0
 800023e:	4688      	mov	r8, r1
 8000240:	2b00      	cmp	r3, #0
 8000242:	d14a      	bne.n	80002da <__udivmoddi4+0xa6>
 8000244:	428a      	cmp	r2, r1
 8000246:	4617      	mov	r7, r2
 8000248:	d962      	bls.n	8000310 <__udivmoddi4+0xdc>
 800024a:	fab2 f682 	clz	r6, r2
 800024e:	b14e      	cbz	r6, 8000264 <__udivmoddi4+0x30>
 8000250:	f1c6 0320 	rsb	r3, r6, #32
 8000254:	fa01 f806 	lsl.w	r8, r1, r6
 8000258:	fa20 f303 	lsr.w	r3, r0, r3
 800025c:	40b7      	lsls	r7, r6
 800025e:	ea43 0808 	orr.w	r8, r3, r8
 8000262:	40b4      	lsls	r4, r6
 8000264:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000268:	fa1f fc87 	uxth.w	ip, r7
 800026c:	fbb8 f1fe 	udiv	r1, r8, lr
 8000270:	0c23      	lsrs	r3, r4, #16
 8000272:	fb0e 8811 	mls	r8, lr, r1, r8
 8000276:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800027a:	fb01 f20c 	mul.w	r2, r1, ip
 800027e:	429a      	cmp	r2, r3
 8000280:	d909      	bls.n	8000296 <__udivmoddi4+0x62>
 8000282:	18fb      	adds	r3, r7, r3
 8000284:	f101 30ff 	add.w	r0, r1, #4294967295
 8000288:	f080 80ea 	bcs.w	8000460 <__udivmoddi4+0x22c>
 800028c:	429a      	cmp	r2, r3
 800028e:	f240 80e7 	bls.w	8000460 <__udivmoddi4+0x22c>
 8000292:	3902      	subs	r1, #2
 8000294:	443b      	add	r3, r7
 8000296:	1a9a      	subs	r2, r3, r2
 8000298:	b2a3      	uxth	r3, r4
 800029a:	fbb2 f0fe 	udiv	r0, r2, lr
 800029e:	fb0e 2210 	mls	r2, lr, r0, r2
 80002a2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002a6:	fb00 fc0c 	mul.w	ip, r0, ip
 80002aa:	459c      	cmp	ip, r3
 80002ac:	d909      	bls.n	80002c2 <__udivmoddi4+0x8e>
 80002ae:	18fb      	adds	r3, r7, r3
 80002b0:	f100 32ff 	add.w	r2, r0, #4294967295
 80002b4:	f080 80d6 	bcs.w	8000464 <__udivmoddi4+0x230>
 80002b8:	459c      	cmp	ip, r3
 80002ba:	f240 80d3 	bls.w	8000464 <__udivmoddi4+0x230>
 80002be:	443b      	add	r3, r7
 80002c0:	3802      	subs	r0, #2
 80002c2:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002c6:	eba3 030c 	sub.w	r3, r3, ip
 80002ca:	2100      	movs	r1, #0
 80002cc:	b11d      	cbz	r5, 80002d6 <__udivmoddi4+0xa2>
 80002ce:	40f3      	lsrs	r3, r6
 80002d0:	2200      	movs	r2, #0
 80002d2:	e9c5 3200 	strd	r3, r2, [r5]
 80002d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002da:	428b      	cmp	r3, r1
 80002dc:	d905      	bls.n	80002ea <__udivmoddi4+0xb6>
 80002de:	b10d      	cbz	r5, 80002e4 <__udivmoddi4+0xb0>
 80002e0:	e9c5 0100 	strd	r0, r1, [r5]
 80002e4:	2100      	movs	r1, #0
 80002e6:	4608      	mov	r0, r1
 80002e8:	e7f5      	b.n	80002d6 <__udivmoddi4+0xa2>
 80002ea:	fab3 f183 	clz	r1, r3
 80002ee:	2900      	cmp	r1, #0
 80002f0:	d146      	bne.n	8000380 <__udivmoddi4+0x14c>
 80002f2:	4573      	cmp	r3, lr
 80002f4:	d302      	bcc.n	80002fc <__udivmoddi4+0xc8>
 80002f6:	4282      	cmp	r2, r0
 80002f8:	f200 8105 	bhi.w	8000506 <__udivmoddi4+0x2d2>
 80002fc:	1a84      	subs	r4, r0, r2
 80002fe:	eb6e 0203 	sbc.w	r2, lr, r3
 8000302:	2001      	movs	r0, #1
 8000304:	4690      	mov	r8, r2
 8000306:	2d00      	cmp	r5, #0
 8000308:	d0e5      	beq.n	80002d6 <__udivmoddi4+0xa2>
 800030a:	e9c5 4800 	strd	r4, r8, [r5]
 800030e:	e7e2      	b.n	80002d6 <__udivmoddi4+0xa2>
 8000310:	2a00      	cmp	r2, #0
 8000312:	f000 8090 	beq.w	8000436 <__udivmoddi4+0x202>
 8000316:	fab2 f682 	clz	r6, r2
 800031a:	2e00      	cmp	r6, #0
 800031c:	f040 80a4 	bne.w	8000468 <__udivmoddi4+0x234>
 8000320:	1a8a      	subs	r2, r1, r2
 8000322:	0c03      	lsrs	r3, r0, #16
 8000324:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000328:	b280      	uxth	r0, r0
 800032a:	b2bc      	uxth	r4, r7
 800032c:	2101      	movs	r1, #1
 800032e:	fbb2 fcfe 	udiv	ip, r2, lr
 8000332:	fb0e 221c 	mls	r2, lr, ip, r2
 8000336:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800033a:	fb04 f20c 	mul.w	r2, r4, ip
 800033e:	429a      	cmp	r2, r3
 8000340:	d907      	bls.n	8000352 <__udivmoddi4+0x11e>
 8000342:	18fb      	adds	r3, r7, r3
 8000344:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000348:	d202      	bcs.n	8000350 <__udivmoddi4+0x11c>
 800034a:	429a      	cmp	r2, r3
 800034c:	f200 80e0 	bhi.w	8000510 <__udivmoddi4+0x2dc>
 8000350:	46c4      	mov	ip, r8
 8000352:	1a9b      	subs	r3, r3, r2
 8000354:	fbb3 f2fe 	udiv	r2, r3, lr
 8000358:	fb0e 3312 	mls	r3, lr, r2, r3
 800035c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000360:	fb02 f404 	mul.w	r4, r2, r4
 8000364:	429c      	cmp	r4, r3
 8000366:	d907      	bls.n	8000378 <__udivmoddi4+0x144>
 8000368:	18fb      	adds	r3, r7, r3
 800036a:	f102 30ff 	add.w	r0, r2, #4294967295
 800036e:	d202      	bcs.n	8000376 <__udivmoddi4+0x142>
 8000370:	429c      	cmp	r4, r3
 8000372:	f200 80ca 	bhi.w	800050a <__udivmoddi4+0x2d6>
 8000376:	4602      	mov	r2, r0
 8000378:	1b1b      	subs	r3, r3, r4
 800037a:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800037e:	e7a5      	b.n	80002cc <__udivmoddi4+0x98>
 8000380:	f1c1 0620 	rsb	r6, r1, #32
 8000384:	408b      	lsls	r3, r1
 8000386:	fa22 f706 	lsr.w	r7, r2, r6
 800038a:	431f      	orrs	r7, r3
 800038c:	fa0e f401 	lsl.w	r4, lr, r1
 8000390:	fa20 f306 	lsr.w	r3, r0, r6
 8000394:	fa2e fe06 	lsr.w	lr, lr, r6
 8000398:	ea4f 4917 	mov.w	r9, r7, lsr #16
 800039c:	4323      	orrs	r3, r4
 800039e:	fa00 f801 	lsl.w	r8, r0, r1
 80003a2:	fa1f fc87 	uxth.w	ip, r7
 80003a6:	fbbe f0f9 	udiv	r0, lr, r9
 80003aa:	0c1c      	lsrs	r4, r3, #16
 80003ac:	fb09 ee10 	mls	lr, r9, r0, lr
 80003b0:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80003b4:	fb00 fe0c 	mul.w	lr, r0, ip
 80003b8:	45a6      	cmp	lr, r4
 80003ba:	fa02 f201 	lsl.w	r2, r2, r1
 80003be:	d909      	bls.n	80003d4 <__udivmoddi4+0x1a0>
 80003c0:	193c      	adds	r4, r7, r4
 80003c2:	f100 3aff 	add.w	sl, r0, #4294967295
 80003c6:	f080 809c 	bcs.w	8000502 <__udivmoddi4+0x2ce>
 80003ca:	45a6      	cmp	lr, r4
 80003cc:	f240 8099 	bls.w	8000502 <__udivmoddi4+0x2ce>
 80003d0:	3802      	subs	r0, #2
 80003d2:	443c      	add	r4, r7
 80003d4:	eba4 040e 	sub.w	r4, r4, lr
 80003d8:	fa1f fe83 	uxth.w	lr, r3
 80003dc:	fbb4 f3f9 	udiv	r3, r4, r9
 80003e0:	fb09 4413 	mls	r4, r9, r3, r4
 80003e4:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003e8:	fb03 fc0c 	mul.w	ip, r3, ip
 80003ec:	45a4      	cmp	ip, r4
 80003ee:	d908      	bls.n	8000402 <__udivmoddi4+0x1ce>
 80003f0:	193c      	adds	r4, r7, r4
 80003f2:	f103 3eff 	add.w	lr, r3, #4294967295
 80003f6:	f080 8082 	bcs.w	80004fe <__udivmoddi4+0x2ca>
 80003fa:	45a4      	cmp	ip, r4
 80003fc:	d97f      	bls.n	80004fe <__udivmoddi4+0x2ca>
 80003fe:	3b02      	subs	r3, #2
 8000400:	443c      	add	r4, r7
 8000402:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000406:	eba4 040c 	sub.w	r4, r4, ip
 800040a:	fba0 ec02 	umull	lr, ip, r0, r2
 800040e:	4564      	cmp	r4, ip
 8000410:	4673      	mov	r3, lr
 8000412:	46e1      	mov	r9, ip
 8000414:	d362      	bcc.n	80004dc <__udivmoddi4+0x2a8>
 8000416:	d05f      	beq.n	80004d8 <__udivmoddi4+0x2a4>
 8000418:	b15d      	cbz	r5, 8000432 <__udivmoddi4+0x1fe>
 800041a:	ebb8 0203 	subs.w	r2, r8, r3
 800041e:	eb64 0409 	sbc.w	r4, r4, r9
 8000422:	fa04 f606 	lsl.w	r6, r4, r6
 8000426:	fa22 f301 	lsr.w	r3, r2, r1
 800042a:	431e      	orrs	r6, r3
 800042c:	40cc      	lsrs	r4, r1
 800042e:	e9c5 6400 	strd	r6, r4, [r5]
 8000432:	2100      	movs	r1, #0
 8000434:	e74f      	b.n	80002d6 <__udivmoddi4+0xa2>
 8000436:	fbb1 fcf2 	udiv	ip, r1, r2
 800043a:	0c01      	lsrs	r1, r0, #16
 800043c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000440:	b280      	uxth	r0, r0
 8000442:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000446:	463b      	mov	r3, r7
 8000448:	4638      	mov	r0, r7
 800044a:	463c      	mov	r4, r7
 800044c:	46b8      	mov	r8, r7
 800044e:	46be      	mov	lr, r7
 8000450:	2620      	movs	r6, #32
 8000452:	fbb1 f1f7 	udiv	r1, r1, r7
 8000456:	eba2 0208 	sub.w	r2, r2, r8
 800045a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800045e:	e766      	b.n	800032e <__udivmoddi4+0xfa>
 8000460:	4601      	mov	r1, r0
 8000462:	e718      	b.n	8000296 <__udivmoddi4+0x62>
 8000464:	4610      	mov	r0, r2
 8000466:	e72c      	b.n	80002c2 <__udivmoddi4+0x8e>
 8000468:	f1c6 0220 	rsb	r2, r6, #32
 800046c:	fa2e f302 	lsr.w	r3, lr, r2
 8000470:	40b7      	lsls	r7, r6
 8000472:	40b1      	lsls	r1, r6
 8000474:	fa20 f202 	lsr.w	r2, r0, r2
 8000478:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800047c:	430a      	orrs	r2, r1
 800047e:	fbb3 f8fe 	udiv	r8, r3, lr
 8000482:	b2bc      	uxth	r4, r7
 8000484:	fb0e 3318 	mls	r3, lr, r8, r3
 8000488:	0c11      	lsrs	r1, r2, #16
 800048a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800048e:	fb08 f904 	mul.w	r9, r8, r4
 8000492:	40b0      	lsls	r0, r6
 8000494:	4589      	cmp	r9, r1
 8000496:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800049a:	b280      	uxth	r0, r0
 800049c:	d93e      	bls.n	800051c <__udivmoddi4+0x2e8>
 800049e:	1879      	adds	r1, r7, r1
 80004a0:	f108 3cff 	add.w	ip, r8, #4294967295
 80004a4:	d201      	bcs.n	80004aa <__udivmoddi4+0x276>
 80004a6:	4589      	cmp	r9, r1
 80004a8:	d81f      	bhi.n	80004ea <__udivmoddi4+0x2b6>
 80004aa:	eba1 0109 	sub.w	r1, r1, r9
 80004ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80004b2:	fb09 f804 	mul.w	r8, r9, r4
 80004b6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ba:	b292      	uxth	r2, r2
 80004bc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004c0:	4542      	cmp	r2, r8
 80004c2:	d229      	bcs.n	8000518 <__udivmoddi4+0x2e4>
 80004c4:	18ba      	adds	r2, r7, r2
 80004c6:	f109 31ff 	add.w	r1, r9, #4294967295
 80004ca:	d2c4      	bcs.n	8000456 <__udivmoddi4+0x222>
 80004cc:	4542      	cmp	r2, r8
 80004ce:	d2c2      	bcs.n	8000456 <__udivmoddi4+0x222>
 80004d0:	f1a9 0102 	sub.w	r1, r9, #2
 80004d4:	443a      	add	r2, r7
 80004d6:	e7be      	b.n	8000456 <__udivmoddi4+0x222>
 80004d8:	45f0      	cmp	r8, lr
 80004da:	d29d      	bcs.n	8000418 <__udivmoddi4+0x1e4>
 80004dc:	ebbe 0302 	subs.w	r3, lr, r2
 80004e0:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004e4:	3801      	subs	r0, #1
 80004e6:	46e1      	mov	r9, ip
 80004e8:	e796      	b.n	8000418 <__udivmoddi4+0x1e4>
 80004ea:	eba7 0909 	sub.w	r9, r7, r9
 80004ee:	4449      	add	r1, r9
 80004f0:	f1a8 0c02 	sub.w	ip, r8, #2
 80004f4:	fbb1 f9fe 	udiv	r9, r1, lr
 80004f8:	fb09 f804 	mul.w	r8, r9, r4
 80004fc:	e7db      	b.n	80004b6 <__udivmoddi4+0x282>
 80004fe:	4673      	mov	r3, lr
 8000500:	e77f      	b.n	8000402 <__udivmoddi4+0x1ce>
 8000502:	4650      	mov	r0, sl
 8000504:	e766      	b.n	80003d4 <__udivmoddi4+0x1a0>
 8000506:	4608      	mov	r0, r1
 8000508:	e6fd      	b.n	8000306 <__udivmoddi4+0xd2>
 800050a:	443b      	add	r3, r7
 800050c:	3a02      	subs	r2, #2
 800050e:	e733      	b.n	8000378 <__udivmoddi4+0x144>
 8000510:	f1ac 0c02 	sub.w	ip, ip, #2
 8000514:	443b      	add	r3, r7
 8000516:	e71c      	b.n	8000352 <__udivmoddi4+0x11e>
 8000518:	4649      	mov	r1, r9
 800051a:	e79c      	b.n	8000456 <__udivmoddi4+0x222>
 800051c:	eba1 0109 	sub.w	r1, r1, r9
 8000520:	46c4      	mov	ip, r8
 8000522:	fbb1 f9fe 	udiv	r9, r1, lr
 8000526:	fb09 f804 	mul.w	r8, r9, r4
 800052a:	e7c4      	b.n	80004b6 <__udivmoddi4+0x282>

0800052c <__aeabi_idiv0>:
 800052c:	4770      	bx	lr
 800052e:	bf00      	nop

08000530 <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000530:	b480      	push	{r7}
 8000532:	b083      	sub	sp, #12
 8000534:	af00      	add	r7, sp, #0
 8000536:	6078      	str	r0, [r7, #4]
 8000538:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 800053a:	687b      	ldr	r3, [r7, #4]
 800053c:	683a      	ldr	r2, [r7, #0]
 800053e:	619a      	str	r2, [r3, #24]
}
 8000540:	bf00      	nop
 8000542:	370c      	adds	r7, #12
 8000544:	46bd      	mov	sp, r7
 8000546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800054a:	4770      	bx	lr

0800054c <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 800054c:	b480      	push	{r7}
 800054e:	b083      	sub	sp, #12
 8000550:	af00      	add	r7, sp, #0
 8000552:	6078      	str	r0, [r7, #4]
 8000554:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8000556:	683b      	ldr	r3, [r7, #0]
 8000558:	041a      	lsls	r2, r3, #16
 800055a:	687b      	ldr	r3, [r7, #4]
 800055c:	619a      	str	r2, [r3, #24]
}
 800055e:	bf00      	nop
 8000560:	370c      	adds	r7, #12
 8000562:	46bd      	mov	sp, r7
 8000564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000568:	4770      	bx	lr

0800056a <LL_GPIO_TogglePin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 800056a:	b480      	push	{r7}
 800056c:	b085      	sub	sp, #20
 800056e:	af00      	add	r7, sp, #0
 8000570:	6078      	str	r0, [r7, #4]
 8000572:	6039      	str	r1, [r7, #0]
  uint32_t odr = READ_REG(GPIOx->ODR);
 8000574:	687b      	ldr	r3, [r7, #4]
 8000576:	695b      	ldr	r3, [r3, #20]
 8000578:	60fb      	str	r3, [r7, #12]
  WRITE_REG(GPIOx->BSRR, ((odr & PinMask) << 16u) | (~odr & PinMask));
 800057a:	68fa      	ldr	r2, [r7, #12]
 800057c:	683b      	ldr	r3, [r7, #0]
 800057e:	4013      	ands	r3, r2
 8000580:	041a      	lsls	r2, r3, #16
 8000582:	68fb      	ldr	r3, [r7, #12]
 8000584:	43d9      	mvns	r1, r3
 8000586:	683b      	ldr	r3, [r7, #0]
 8000588:	400b      	ands	r3, r1
 800058a:	431a      	orrs	r2, r3
 800058c:	687b      	ldr	r3, [r7, #4]
 800058e:	619a      	str	r2, [r3, #24]
}
 8000590:	bf00      	nop
 8000592:	3714      	adds	r7, #20
 8000594:	46bd      	mov	sp, r7
 8000596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800059a:	4770      	bx	lr

0800059c <_ZN4GpioC1EP12GPIO_TypeDeft>:
#include "hw_gpio.hpp"

Gpio::Gpio(GPIO_TypeDef* port, uint16_t pin)
 800059c:	b480      	push	{r7}
 800059e:	b085      	sub	sp, #20
 80005a0:	af00      	add	r7, sp, #0
 80005a2:	60f8      	str	r0, [r7, #12]
 80005a4:	60b9      	str	r1, [r7, #8]
 80005a6:	4613      	mov	r3, r2
 80005a8:	80fb      	strh	r3, [r7, #6]
    : m_port(port), m_pin(pin) {}
 80005aa:	68fb      	ldr	r3, [r7, #12]
 80005ac:	68ba      	ldr	r2, [r7, #8]
 80005ae:	601a      	str	r2, [r3, #0]
 80005b0:	68fb      	ldr	r3, [r7, #12]
 80005b2:	88fa      	ldrh	r2, [r7, #6]
 80005b4:	809a      	strh	r2, [r3, #4]
 80005b6:	68fb      	ldr	r3, [r7, #12]
 80005b8:	4618      	mov	r0, r3
 80005ba:	3714      	adds	r7, #20
 80005bc:	46bd      	mov	sp, r7
 80005be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c2:	4770      	bx	lr

080005c4 <_ZN4Gpio3setEv>:

void Gpio::set() {
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b082      	sub	sp, #8
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	6078      	str	r0, [r7, #4]
    LL_GPIO_SetOutputPin(m_port, m_pin);
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	681a      	ldr	r2, [r3, #0]
 80005d0:	687b      	ldr	r3, [r7, #4]
 80005d2:	889b      	ldrh	r3, [r3, #4]
 80005d4:	4619      	mov	r1, r3
 80005d6:	4610      	mov	r0, r2
 80005d8:	f7ff ffaa 	bl	8000530 <LL_GPIO_SetOutputPin>
}
 80005dc:	bf00      	nop
 80005de:	3708      	adds	r7, #8
 80005e0:	46bd      	mov	sp, r7
 80005e2:	bd80      	pop	{r7, pc}

080005e4 <_ZN4Gpio5resetEv>:

void Gpio::reset() {
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b082      	sub	sp, #8
 80005e8:	af00      	add	r7, sp, #0
 80005ea:	6078      	str	r0, [r7, #4]
    LL_GPIO_ResetOutputPin(m_port, m_pin);
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	681a      	ldr	r2, [r3, #0]
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	889b      	ldrh	r3, [r3, #4]
 80005f4:	4619      	mov	r1, r3
 80005f6:	4610      	mov	r0, r2
 80005f8:	f7ff ffa8 	bl	800054c <LL_GPIO_ResetOutputPin>
}
 80005fc:	bf00      	nop
 80005fe:	3708      	adds	r7, #8
 8000600:	46bd      	mov	sp, r7
 8000602:	bd80      	pop	{r7, pc}

08000604 <_ZN4Gpio6toggleEv>:

void Gpio::toggle() {
 8000604:	b580      	push	{r7, lr}
 8000606:	b082      	sub	sp, #8
 8000608:	af00      	add	r7, sp, #0
 800060a:	6078      	str	r0, [r7, #4]
    LL_GPIO_TogglePin(m_port, m_pin);
 800060c:	687b      	ldr	r3, [r7, #4]
 800060e:	681a      	ldr	r2, [r3, #0]
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	889b      	ldrh	r3, [r3, #4]
 8000614:	4619      	mov	r1, r3
 8000616:	4610      	mov	r0, r2
 8000618:	f7ff ffa7 	bl	800056a <LL_GPIO_TogglePin>
}
 800061c:	bf00      	nop
 800061e:	3708      	adds	r7, #8
 8000620:	46bd      	mov	sp, r7
 8000622:	bd80      	pop	{r7, pc}

08000624 <LL_SPI_Enable>:
  * @rmtoll CR1          SPE           LL_SPI_Enable
  * @param  SPIx SPI Instance
  * @retval None
  */
__STATIC_INLINE void LL_SPI_Enable(SPI_TypeDef *SPIx)
{
 8000624:	b480      	push	{r7}
 8000626:	b083      	sub	sp, #12
 8000628:	af00      	add	r7, sp, #0
 800062a:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR1, SPI_CR1_SPE);
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	681b      	ldr	r3, [r3, #0]
 8000630:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	601a      	str	r2, [r3, #0]
}
 8000638:	bf00      	nop
 800063a:	370c      	adds	r7, #12
 800063c:	46bd      	mov	sp, r7
 800063e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000642:	4770      	bx	lr

08000644 <LL_SPI_IsEnabled>:
  * @rmtoll CR1          SPE           LL_SPI_IsEnabled
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsEnabled(const SPI_TypeDef *SPIx)
{
 8000644:	b480      	push	{r7}
 8000646:	b083      	sub	sp, #12
 8000648:	af00      	add	r7, sp, #0
 800064a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->CR1, SPI_CR1_SPE) == (SPI_CR1_SPE)) ? 1UL : 0UL);
 800064c:	687b      	ldr	r3, [r7, #4]
 800064e:	681b      	ldr	r3, [r3, #0]
 8000650:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000654:	2b40      	cmp	r3, #64	@ 0x40
 8000656:	d101      	bne.n	800065c <LL_SPI_IsEnabled+0x18>
 8000658:	2301      	movs	r3, #1
 800065a:	e000      	b.n	800065e <LL_SPI_IsEnabled+0x1a>
 800065c:	2300      	movs	r3, #0
}
 800065e:	4618      	mov	r0, r3
 8000660:	370c      	adds	r7, #12
 8000662:	46bd      	mov	sp, r7
 8000664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000668:	4770      	bx	lr

0800066a <LL_SPI_IsActiveFlag_RXNE>:
  * @rmtoll SR           RXNE          LL_SPI_IsActiveFlag_RXNE
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_RXNE(const SPI_TypeDef *SPIx)
{
 800066a:	b480      	push	{r7}
 800066c:	b083      	sub	sp, #12
 800066e:	af00      	add	r7, sp, #0
 8000670:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 8000672:	687b      	ldr	r3, [r7, #4]
 8000674:	689b      	ldr	r3, [r3, #8]
 8000676:	f003 0301 	and.w	r3, r3, #1
 800067a:	2b01      	cmp	r3, #1
 800067c:	d101      	bne.n	8000682 <LL_SPI_IsActiveFlag_RXNE+0x18>
 800067e:	2301      	movs	r3, #1
 8000680:	e000      	b.n	8000684 <LL_SPI_IsActiveFlag_RXNE+0x1a>
 8000682:	2300      	movs	r3, #0
}
 8000684:	4618      	mov	r0, r3
 8000686:	370c      	adds	r7, #12
 8000688:	46bd      	mov	sp, r7
 800068a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800068e:	4770      	bx	lr

08000690 <LL_SPI_IsActiveFlag_TXE>:
  * @rmtoll SR           TXE           LL_SPI_IsActiveFlag_TXE
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_TXE(const SPI_TypeDef *SPIx)
{
 8000690:	b480      	push	{r7}
 8000692:	b083      	sub	sp, #12
 8000694:	af00      	add	r7, sp, #0
 8000696:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 8000698:	687b      	ldr	r3, [r7, #4]
 800069a:	689b      	ldr	r3, [r3, #8]
 800069c:	f003 0302 	and.w	r3, r3, #2
 80006a0:	2b02      	cmp	r3, #2
 80006a2:	d101      	bne.n	80006a8 <LL_SPI_IsActiveFlag_TXE+0x18>
 80006a4:	2301      	movs	r3, #1
 80006a6:	e000      	b.n	80006aa <LL_SPI_IsActiveFlag_TXE+0x1a>
 80006a8:	2300      	movs	r3, #0
}
 80006aa:	4618      	mov	r0, r3
 80006ac:	370c      	adds	r7, #12
 80006ae:	46bd      	mov	sp, r7
 80006b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b4:	4770      	bx	lr

080006b6 <LL_SPI_ReceiveData8>:
  * @rmtoll DR           DR            LL_SPI_ReceiveData8
  * @param  SPIx SPI Instance
  * @retval RxData Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_SPI_ReceiveData8(SPI_TypeDef *SPIx)
{
 80006b6:	b480      	push	{r7}
 80006b8:	b083      	sub	sp, #12
 80006ba:	af00      	add	r7, sp, #0
 80006bc:	6078      	str	r0, [r7, #4]
  return (*((__IO uint8_t *)&SPIx->DR));
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	330c      	adds	r3, #12
 80006c2:	781b      	ldrb	r3, [r3, #0]
 80006c4:	b2db      	uxtb	r3, r3
}
 80006c6:	4618      	mov	r0, r3
 80006c8:	370c      	adds	r7, #12
 80006ca:	46bd      	mov	sp, r7
 80006cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d0:	4770      	bx	lr

080006d2 <LL_SPI_TransmitData8>:
  * @param  SPIx SPI Instance
  * @param  TxData Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_SPI_TransmitData8(SPI_TypeDef *SPIx, uint8_t TxData)
{
 80006d2:	b480      	push	{r7}
 80006d4:	b085      	sub	sp, #20
 80006d6:	af00      	add	r7, sp, #0
 80006d8:	6078      	str	r0, [r7, #4]
 80006da:	460b      	mov	r3, r1
 80006dc:	70fb      	strb	r3, [r7, #3]
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SPIx->DR);
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	330c      	adds	r3, #12
 80006e2:	60fb      	str	r3, [r7, #12]
  *spidr = TxData;
 80006e4:	68fb      	ldr	r3, [r7, #12]
 80006e6:	78fa      	ldrb	r2, [r7, #3]
 80006e8:	701a      	strb	r2, [r3, #0]
#else
  *((__IO uint8_t *)&SPIx->DR) = TxData;
#endif /* __GNUC__ */
}
 80006ea:	bf00      	nop
 80006ec:	3714      	adds	r7, #20
 80006ee:	46bd      	mov	sp, r7
 80006f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f4:	4770      	bx	lr

080006f6 <_ZN3SpiC1EP11SPI_TypeDef4Gpio>:
#include "hw_spi.hpp"

Spi::Spi(SPI_TypeDef* spi, Gpio csPin)
 80006f6:	b480      	push	{r7}
 80006f8:	b085      	sub	sp, #20
 80006fa:	af00      	add	r7, sp, #0
 80006fc:	60f8      	str	r0, [r7, #12]
 80006fe:	60b9      	str	r1, [r7, #8]
 8000700:	4639      	mov	r1, r7
 8000702:	e881 000c 	stmia.w	r1, {r2, r3}
    : m_spi(spi), m_csPin(csPin) {}
 8000706:	68fb      	ldr	r3, [r7, #12]
 8000708:	68ba      	ldr	r2, [r7, #8]
 800070a:	601a      	str	r2, [r3, #0]
 800070c:	68fb      	ldr	r3, [r7, #12]
 800070e:	3304      	adds	r3, #4
 8000710:	463a      	mov	r2, r7
 8000712:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000716:	e883 0003 	stmia.w	r3, {r0, r1}
 800071a:	68fb      	ldr	r3, [r7, #12]
 800071c:	4618      	mov	r0, r3
 800071e:	3714      	adds	r7, #20
 8000720:	46bd      	mov	sp, r7
 8000722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000726:	4770      	bx	lr

08000728 <_ZN3Spi8deselectEv>:

void Spi::deselect(){
 8000728:	b580      	push	{r7, lr}
 800072a:	b082      	sub	sp, #8
 800072c:	af00      	add	r7, sp, #0
 800072e:	6078      	str	r0, [r7, #4]
    m_csPin.set();
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	3304      	adds	r3, #4
 8000734:	4618      	mov	r0, r3
 8000736:	f7ff ff45 	bl	80005c4 <_ZN4Gpio3setEv>
    LL_mDelay(1);
 800073a:	2001      	movs	r0, #1
 800073c:	f002 f842 	bl	80027c4 <LL_mDelay>
}
 8000740:	bf00      	nop
 8000742:	3708      	adds	r7, #8
 8000744:	46bd      	mov	sp, r7
 8000746:	bd80      	pop	{r7, pc}

08000748 <_ZN3Spi6selectEv>:

void Spi::select(){
 8000748:	b580      	push	{r7, lr}
 800074a:	b082      	sub	sp, #8
 800074c:	af00      	add	r7, sp, #0
 800074e:	6078      	str	r0, [r7, #4]
    m_csPin.reset();
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	3304      	adds	r3, #4
 8000754:	4618      	mov	r0, r3
 8000756:	f7ff ff45 	bl	80005e4 <_ZN4Gpio5resetEv>
    LL_mDelay(1);
 800075a:	2001      	movs	r0, #1
 800075c:	f002 f832 	bl	80027c4 <LL_mDelay>
}
 8000760:	bf00      	nop
 8000762:	3708      	adds	r7, #8
 8000764:	46bd      	mov	sp, r7
 8000766:	bd80      	pop	{r7, pc}

08000768 <_ZN3Spi5writeEPhh>:

void Spi::write(uint8_t *buffer, uint8_t length)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	b086      	sub	sp, #24
 800076c:	af00      	add	r7, sp, #0
 800076e:	60f8      	str	r0, [r7, #12]
 8000770:	60b9      	str	r1, [r7, #8]
 8000772:	4613      	mov	r3, r2
 8000774:	71fb      	strb	r3, [r7, #7]
    for(uint8_t i=0; i < length; i++)
 8000776:	2300      	movs	r3, #0
 8000778:	75fb      	strb	r3, [r7, #23]
 800077a:	e00a      	b.n	8000792 <_ZN3Spi5writeEPhh+0x2a>
    { 
        TransmitAndReceive(buffer[i]);
 800077c:	7dfb      	ldrb	r3, [r7, #23]
 800077e:	68ba      	ldr	r2, [r7, #8]
 8000780:	4413      	add	r3, r2
 8000782:	781b      	ldrb	r3, [r3, #0]
 8000784:	4619      	mov	r1, r3
 8000786:	68f8      	ldr	r0, [r7, #12]
 8000788:	f000 f82f 	bl	80007ea <_ZN3Spi18TransmitAndReceiveEh>
    for(uint8_t i=0; i < length; i++)
 800078c:	7dfb      	ldrb	r3, [r7, #23]
 800078e:	3301      	adds	r3, #1
 8000790:	75fb      	strb	r3, [r7, #23]
 8000792:	7dfa      	ldrb	r2, [r7, #23]
 8000794:	79fb      	ldrb	r3, [r7, #7]
 8000796:	429a      	cmp	r2, r3
 8000798:	d3f0      	bcc.n	800077c <_ZN3Spi5writeEPhh+0x14>
    }
}
 800079a:	bf00      	nop
 800079c:	bf00      	nop
 800079e:	3718      	adds	r7, #24
 80007a0:	46bd      	mov	sp, r7
 80007a2:	bd80      	pop	{r7, pc}

080007a4 <_ZN3Spi9writeReadEhPhh>:

// TODO:  ?? data for write should be an array and add timer.
void Spi::writeRead(uint8_t data, uint8_t *buffer, uint8_t length)
{
 80007a4:	b590      	push	{r4, r7, lr}
 80007a6:	b087      	sub	sp, #28
 80007a8:	af00      	add	r7, sp, #0
 80007aa:	60f8      	str	r0, [r7, #12]
 80007ac:	607a      	str	r2, [r7, #4]
 80007ae:	461a      	mov	r2, r3
 80007b0:	460b      	mov	r3, r1
 80007b2:	72fb      	strb	r3, [r7, #11]
 80007b4:	4613      	mov	r3, r2
 80007b6:	72bb      	strb	r3, [r7, #10]
    // read multiple bytes
    for(uint8_t i=0; i < length; i++)
 80007b8:	2300      	movs	r3, #0
 80007ba:	75fb      	strb	r3, [r7, #23]
 80007bc:	e00c      	b.n	80007d8 <_ZN3Spi9writeReadEhPhh+0x34>
    {
        buffer[i] = TransmitAndReceive(data);
 80007be:	7dfb      	ldrb	r3, [r7, #23]
 80007c0:	687a      	ldr	r2, [r7, #4]
 80007c2:	18d4      	adds	r4, r2, r3
 80007c4:	7afb      	ldrb	r3, [r7, #11]
 80007c6:	4619      	mov	r1, r3
 80007c8:	68f8      	ldr	r0, [r7, #12]
 80007ca:	f000 f80e 	bl	80007ea <_ZN3Spi18TransmitAndReceiveEh>
 80007ce:	4603      	mov	r3, r0
 80007d0:	7023      	strb	r3, [r4, #0]
    for(uint8_t i=0; i < length; i++)
 80007d2:	7dfb      	ldrb	r3, [r7, #23]
 80007d4:	3301      	adds	r3, #1
 80007d6:	75fb      	strb	r3, [r7, #23]
 80007d8:	7dfa      	ldrb	r2, [r7, #23]
 80007da:	7abb      	ldrb	r3, [r7, #10]
 80007dc:	429a      	cmp	r2, r3
 80007de:	d3ee      	bcc.n	80007be <_ZN3Spi9writeReadEhPhh+0x1a>
    }
}
 80007e0:	bf00      	nop
 80007e2:	bf00      	nop
 80007e4:	371c      	adds	r7, #28
 80007e6:	46bd      	mov	sp, r7
 80007e8:	bd90      	pop	{r4, r7, pc}

080007ea <_ZN3Spi18TransmitAndReceiveEh>:

uint8_t Spi::TransmitAndReceive(uint8_t data) {
 80007ea:	b580      	push	{r7, lr}
 80007ec:	b082      	sub	sp, #8
 80007ee:	af00      	add	r7, sp, #0
 80007f0:	6078      	str	r0, [r7, #4]
 80007f2:	460b      	mov	r3, r1
 80007f4:	70fb      	strb	r3, [r7, #3]
    // transmit
    LL_SPI_TransmitData8(m_spi, data);
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	681b      	ldr	r3, [r3, #0]
 80007fa:	78fa      	ldrb	r2, [r7, #3]
 80007fc:	4611      	mov	r1, r2
 80007fe:	4618      	mov	r0, r3
 8000800:	f7ff ff67 	bl	80006d2 <LL_SPI_TransmitData8>
    while(!LL_SPI_IsActiveFlag_TXE(m_spi));
 8000804:	bf00      	nop
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	681b      	ldr	r3, [r3, #0]
 800080a:	4618      	mov	r0, r3
 800080c:	f7ff ff40 	bl	8000690 <LL_SPI_IsActiveFlag_TXE>
 8000810:	4603      	mov	r3, r0
 8000812:	2b00      	cmp	r3, #0
 8000814:	bf0c      	ite	eq
 8000816:	2301      	moveq	r3, #1
 8000818:	2300      	movne	r3, #0
 800081a:	b2db      	uxtb	r3, r3
 800081c:	2b00      	cmp	r3, #0
 800081e:	d1f2      	bne.n	8000806 <_ZN3Spi18TransmitAndReceiveEh+0x1c>

    // receive
    while(!LL_SPI_IsActiveFlag_RXNE(m_spi));
 8000820:	bf00      	nop
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	681b      	ldr	r3, [r3, #0]
 8000826:	4618      	mov	r0, r3
 8000828:	f7ff ff1f 	bl	800066a <LL_SPI_IsActiveFlag_RXNE>
 800082c:	4603      	mov	r3, r0
 800082e:	2b00      	cmp	r3, #0
 8000830:	bf0c      	ite	eq
 8000832:	2301      	moveq	r3, #1
 8000834:	2300      	movne	r3, #0
 8000836:	b2db      	uxtb	r3, r3
 8000838:	2b00      	cmp	r3, #0
 800083a:	d1f2      	bne.n	8000822 <_ZN3Spi18TransmitAndReceiveEh+0x38>
    return LL_SPI_ReceiveData8(m_spi);
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	681b      	ldr	r3, [r3, #0]
 8000840:	4618      	mov	r0, r3
 8000842:	f7ff ff38 	bl	80006b6 <LL_SPI_ReceiveData8>
 8000846:	4603      	mov	r3, r0
}
 8000848:	4618      	mov	r0, r3
 800084a:	3708      	adds	r7, #8
 800084c:	46bd      	mov	sp, r7
 800084e:	bd80      	pop	{r7, pc}

08000850 <_ZN3Spi6enableEv>:

void Spi::enable() {
 8000850:	b580      	push	{r7, lr}
 8000852:	b082      	sub	sp, #8
 8000854:	af00      	add	r7, sp, #0
 8000856:	6078      	str	r0, [r7, #4]
    LL_SPI_Enable(m_spi);
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	681b      	ldr	r3, [r3, #0]
 800085c:	4618      	mov	r0, r3
 800085e:	f7ff fee1 	bl	8000624 <LL_SPI_Enable>
    while(!LL_SPI_IsEnabled(m_spi));
 8000862:	bf00      	nop
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	681b      	ldr	r3, [r3, #0]
 8000868:	4618      	mov	r0, r3
 800086a:	f7ff feeb 	bl	8000644 <LL_SPI_IsEnabled>
 800086e:	4603      	mov	r3, r0
 8000870:	2b00      	cmp	r3, #0
 8000872:	bf0c      	ite	eq
 8000874:	2301      	moveq	r3, #1
 8000876:	2300      	movne	r3, #0
 8000878:	b2db      	uxtb	r3, r3
 800087a:	2b00      	cmp	r3, #0
 800087c:	d1f2      	bne.n	8000864 <_ZN3Spi6enableEv+0x14>
 800087e:	bf00      	nop
 8000880:	bf00      	nop
 8000882:	3708      	adds	r7, #8
 8000884:	46bd      	mov	sp, r7
 8000886:	bd80      	pop	{r7, pc}

08000888 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000888:	b480      	push	{r7}
 800088a:	b085      	sub	sp, #20
 800088c:	af00      	add	r7, sp, #0
 800088e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	f003 0307 	and.w	r3, r3, #7
 8000896:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000898:	4b0c      	ldr	r3, [pc, #48]	@ (80008cc <__NVIC_SetPriorityGrouping+0x44>)
 800089a:	68db      	ldr	r3, [r3, #12]
 800089c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800089e:	68ba      	ldr	r2, [r7, #8]
 80008a0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80008a4:	4013      	ands	r3, r2
 80008a6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80008a8:	68fb      	ldr	r3, [r7, #12]
 80008aa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80008ac:	68bb      	ldr	r3, [r7, #8]
 80008ae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80008b0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80008b4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80008b8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80008ba:	4a04      	ldr	r2, [pc, #16]	@ (80008cc <__NVIC_SetPriorityGrouping+0x44>)
 80008bc:	68bb      	ldr	r3, [r7, #8]
 80008be:	60d3      	str	r3, [r2, #12]
}
 80008c0:	bf00      	nop
 80008c2:	3714      	adds	r7, #20
 80008c4:	46bd      	mov	sp, r7
 80008c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ca:	4770      	bx	lr
 80008cc:	e000ed00 	.word	0xe000ed00

080008d0 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 80008d0:	b480      	push	{r7}
 80008d2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80008d4:	4b05      	ldr	r3, [pc, #20]	@ (80008ec <LL_RCC_HSI_Enable+0x1c>)
 80008d6:	681b      	ldr	r3, [r3, #0]
 80008d8:	4a04      	ldr	r2, [pc, #16]	@ (80008ec <LL_RCC_HSI_Enable+0x1c>)
 80008da:	f043 0301 	orr.w	r3, r3, #1
 80008de:	6013      	str	r3, [r2, #0]
}
 80008e0:	bf00      	nop
 80008e2:	46bd      	mov	sp, r7
 80008e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e8:	4770      	bx	lr
 80008ea:	bf00      	nop
 80008ec:	40023800 	.word	0x40023800

080008f0 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 80008f0:	b480      	push	{r7}
 80008f2:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 80008f4:	4b06      	ldr	r3, [pc, #24]	@ (8000910 <LL_RCC_HSI_IsReady+0x20>)
 80008f6:	681b      	ldr	r3, [r3, #0]
 80008f8:	f003 0302 	and.w	r3, r3, #2
 80008fc:	2b02      	cmp	r3, #2
 80008fe:	bf0c      	ite	eq
 8000900:	2301      	moveq	r3, #1
 8000902:	2300      	movne	r3, #0
 8000904:	b2db      	uxtb	r3, r3
}
 8000906:	4618      	mov	r0, r3
 8000908:	46bd      	mov	sp, r7
 800090a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800090e:	4770      	bx	lr
 8000910:	40023800 	.word	0x40023800

08000914 <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll CR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 31
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 8000914:	b480      	push	{r7}
 8000916:	b083      	sub	sp, #12
 8000918:	af00      	add	r7, sp, #0
 800091a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_HSITRIM, Value << RCC_CR_HSITRIM_Pos);
 800091c:	4b07      	ldr	r3, [pc, #28]	@ (800093c <LL_RCC_HSI_SetCalibTrimming+0x28>)
 800091e:	681b      	ldr	r3, [r3, #0]
 8000920:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	00db      	lsls	r3, r3, #3
 8000928:	4904      	ldr	r1, [pc, #16]	@ (800093c <LL_RCC_HSI_SetCalibTrimming+0x28>)
 800092a:	4313      	orrs	r3, r2
 800092c:	600b      	str	r3, [r1, #0]
}
 800092e:	bf00      	nop
 8000930:	370c      	adds	r7, #12
 8000932:	46bd      	mov	sp, r7
 8000934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000938:	4770      	bx	lr
 800093a:	bf00      	nop
 800093c:	40023800 	.word	0x40023800

08000940 <LL_RCC_SetSysClkSource>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8000940:	b480      	push	{r7}
 8000942:	b083      	sub	sp, #12
 8000944:	af00      	add	r7, sp, #0
 8000946:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8000948:	4b06      	ldr	r3, [pc, #24]	@ (8000964 <LL_RCC_SetSysClkSource+0x24>)
 800094a:	689b      	ldr	r3, [r3, #8]
 800094c:	f023 0203 	bic.w	r2, r3, #3
 8000950:	4904      	ldr	r1, [pc, #16]	@ (8000964 <LL_RCC_SetSysClkSource+0x24>)
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	4313      	orrs	r3, r2
 8000956:	608b      	str	r3, [r1, #8]
}
 8000958:	bf00      	nop
 800095a:	370c      	adds	r7, #12
 800095c:	46bd      	mov	sp, r7
 800095e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000962:	4770      	bx	lr
 8000964:	40023800 	.word	0x40023800

08000968 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLLR (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8000968:	b480      	push	{r7}
 800096a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800096c:	4b04      	ldr	r3, [pc, #16]	@ (8000980 <LL_RCC_GetSysClkSource+0x18>)
 800096e:	689b      	ldr	r3, [r3, #8]
 8000970:	f003 030c 	and.w	r3, r3, #12
}
 8000974:	4618      	mov	r0, r3
 8000976:	46bd      	mov	sp, r7
 8000978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800097c:	4770      	bx	lr
 800097e:	bf00      	nop
 8000980:	40023800 	.word	0x40023800

08000984 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8000984:	b480      	push	{r7}
 8000986:	b083      	sub	sp, #12
 8000988:	af00      	add	r7, sp, #0
 800098a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 800098c:	4b06      	ldr	r3, [pc, #24]	@ (80009a8 <LL_RCC_SetAHBPrescaler+0x24>)
 800098e:	689b      	ldr	r3, [r3, #8]
 8000990:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8000994:	4904      	ldr	r1, [pc, #16]	@ (80009a8 <LL_RCC_SetAHBPrescaler+0x24>)
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	4313      	orrs	r3, r2
 800099a:	608b      	str	r3, [r1, #8]
}
 800099c:	bf00      	nop
 800099e:	370c      	adds	r7, #12
 80009a0:	46bd      	mov	sp, r7
 80009a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a6:	4770      	bx	lr
 80009a8:	40023800 	.word	0x40023800

080009ac <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 80009ac:	b480      	push	{r7}
 80009ae:	b083      	sub	sp, #12
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 80009b4:	4b06      	ldr	r3, [pc, #24]	@ (80009d0 <LL_RCC_SetAPB1Prescaler+0x24>)
 80009b6:	689b      	ldr	r3, [r3, #8]
 80009b8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80009bc:	4904      	ldr	r1, [pc, #16]	@ (80009d0 <LL_RCC_SetAPB1Prescaler+0x24>)
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	4313      	orrs	r3, r2
 80009c2:	608b      	str	r3, [r1, #8]
}
 80009c4:	bf00      	nop
 80009c6:	370c      	adds	r7, #12
 80009c8:	46bd      	mov	sp, r7
 80009ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ce:	4770      	bx	lr
 80009d0:	40023800 	.word	0x40023800

080009d4 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 80009d4:	b480      	push	{r7}
 80009d6:	b083      	sub	sp, #12
 80009d8:	af00      	add	r7, sp, #0
 80009da:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 80009dc:	4b06      	ldr	r3, [pc, #24]	@ (80009f8 <LL_RCC_SetAPB2Prescaler+0x24>)
 80009de:	689b      	ldr	r3, [r3, #8]
 80009e0:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80009e4:	4904      	ldr	r1, [pc, #16]	@ (80009f8 <LL_RCC_SetAPB2Prescaler+0x24>)
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	4313      	orrs	r3, r2
 80009ea:	608b      	str	r3, [r1, #8]
}
 80009ec:	bf00      	nop
 80009ee:	370c      	adds	r7, #12
 80009f0:	46bd      	mov	sp, r7
 80009f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f6:	4770      	bx	lr
 80009f8:	40023800 	.word	0x40023800

080009fc <LL_RCC_SetTIMPrescaler>:
  *         @arg @ref LL_RCC_TIM_PRESCALER_TWICE
  *         @arg @ref LL_RCC_TIM_PRESCALER_FOUR_TIMES
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetTIMPrescaler(uint32_t Prescaler)
{
 80009fc:	b480      	push	{r7}
 80009fe:	b083      	sub	sp, #12
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->DCKCFGR, RCC_DCKCFGR_TIMPRE, Prescaler);
 8000a04:	4b07      	ldr	r3, [pc, #28]	@ (8000a24 <LL_RCC_SetTIMPrescaler+0x28>)
 8000a06:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000a0a:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8000a0e:	4905      	ldr	r1, [pc, #20]	@ (8000a24 <LL_RCC_SetTIMPrescaler+0x28>)
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	4313      	orrs	r3, r2
 8000a14:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
}
 8000a18:	bf00      	nop
 8000a1a:	370c      	adds	r7, #12
 8000a1c:	46bd      	mov	sp, r7
 8000a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a22:	4770      	bx	lr
 8000a24:	40023800 	.word	0x40023800

08000a28 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8000a28:	b480      	push	{r7}
 8000a2a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8000a2c:	4b05      	ldr	r3, [pc, #20]	@ (8000a44 <LL_RCC_PLL_Enable+0x1c>)
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	4a04      	ldr	r2, [pc, #16]	@ (8000a44 <LL_RCC_PLL_Enable+0x1c>)
 8000a32:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000a36:	6013      	str	r3, [r2, #0]
}
 8000a38:	bf00      	nop
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a40:	4770      	bx	lr
 8000a42:	bf00      	nop
 8000a44:	40023800 	.word	0x40023800

08000a48 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8000a48:	b480      	push	{r7}
 8000a4a:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY));
 8000a4c:	4b07      	ldr	r3, [pc, #28]	@ (8000a6c <LL_RCC_PLL_IsReady+0x24>)
 8000a4e:	681b      	ldr	r3, [r3, #0]
 8000a50:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000a54:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8000a58:	bf0c      	ite	eq
 8000a5a:	2301      	moveq	r3, #1
 8000a5c:	2300      	movne	r3, #0
 8000a5e:	b2db      	uxtb	r3, r3
}
 8000a60:	4618      	mov	r0, r3
 8000a62:	46bd      	mov	sp, r7
 8000a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a68:	4770      	bx	lr
 8000a6a:	bf00      	nop
 8000a6c:	40023800 	.word	0x40023800

08000a70 <LL_RCC_PLL_ConfigDomain_SYS>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLM, uint32_t PLLN, uint32_t PLLP_R)
{
 8000a70:	b480      	push	{r7}
 8000a72:	b085      	sub	sp, #20
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	60f8      	str	r0, [r7, #12]
 8000a78:	60b9      	str	r1, [r7, #8]
 8000a7a:	607a      	str	r2, [r7, #4]
 8000a7c:	603b      	str	r3, [r7, #0]
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM | RCC_PLLCFGR_PLLN,
 8000a7e:	4b11      	ldr	r3, [pc, #68]	@ (8000ac4 <LL_RCC_PLL_ConfigDomain_SYS+0x54>)
 8000a80:	685a      	ldr	r2, [r3, #4]
 8000a82:	4b11      	ldr	r3, [pc, #68]	@ (8000ac8 <LL_RCC_PLL_ConfigDomain_SYS+0x58>)
 8000a84:	4013      	ands	r3, r2
 8000a86:	68f9      	ldr	r1, [r7, #12]
 8000a88:	68ba      	ldr	r2, [r7, #8]
 8000a8a:	4311      	orrs	r1, r2
 8000a8c:	687a      	ldr	r2, [r7, #4]
 8000a8e:	0192      	lsls	r2, r2, #6
 8000a90:	430a      	orrs	r2, r1
 8000a92:	490c      	ldr	r1, [pc, #48]	@ (8000ac4 <LL_RCC_PLL_ConfigDomain_SYS+0x54>)
 8000a94:	4313      	orrs	r3, r2
 8000a96:	604b      	str	r3, [r1, #4]
             Source | PLLM | PLLN << RCC_PLLCFGR_PLLN_Pos);
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLP, PLLP_R);
 8000a98:	4b0a      	ldr	r3, [pc, #40]	@ (8000ac4 <LL_RCC_PLL_ConfigDomain_SYS+0x54>)
 8000a9a:	685b      	ldr	r3, [r3, #4]
 8000a9c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8000aa0:	4908      	ldr	r1, [pc, #32]	@ (8000ac4 <LL_RCC_PLL_ConfigDomain_SYS+0x54>)
 8000aa2:	683b      	ldr	r3, [r7, #0]
 8000aa4:	4313      	orrs	r3, r2
 8000aa6:	604b      	str	r3, [r1, #4]
#if defined(RCC_PLLR_SYSCLK_SUPPORT)
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLR, PLLP_R);
 8000aa8:	4b06      	ldr	r3, [pc, #24]	@ (8000ac4 <LL_RCC_PLL_ConfigDomain_SYS+0x54>)
 8000aaa:	685b      	ldr	r3, [r3, #4]
 8000aac:	f023 42e0 	bic.w	r2, r3, #1879048192	@ 0x70000000
 8000ab0:	4904      	ldr	r1, [pc, #16]	@ (8000ac4 <LL_RCC_PLL_ConfigDomain_SYS+0x54>)
 8000ab2:	683b      	ldr	r3, [r7, #0]
 8000ab4:	4313      	orrs	r3, r2
 8000ab6:	604b      	str	r3, [r1, #4]
#endif /* RCC_PLLR_SYSCLK_SUPPORT */
}
 8000ab8:	bf00      	nop
 8000aba:	3714      	adds	r7, #20
 8000abc:	46bd      	mov	sp, r7
 8000abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac2:	4770      	bx	lr
 8000ac4:	40023800 	.word	0x40023800
 8000ac8:	ffbf8000 	.word	0xffbf8000

08000acc <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000acc:	b480      	push	{r7}
 8000ace:	b085      	sub	sp, #20
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 8000ad4:	4b08      	ldr	r3, [pc, #32]	@ (8000af8 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000ad6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000ad8:	4907      	ldr	r1, [pc, #28]	@ (8000af8 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	4313      	orrs	r3, r2
 8000ade:	630b      	str	r3, [r1, #48]	@ 0x30
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8000ae0:	4b05      	ldr	r3, [pc, #20]	@ (8000af8 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000ae2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	4013      	ands	r3, r2
 8000ae8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000aea:	68fb      	ldr	r3, [r7, #12]
}
 8000aec:	bf00      	nop
 8000aee:	3714      	adds	r7, #20
 8000af0:	46bd      	mov	sp, r7
 8000af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af6:	4770      	bx	lr
 8000af8:	40023800 	.word	0x40023800

08000afc <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000afc:	b480      	push	{r7}
 8000afe:	b085      	sub	sp, #20
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 8000b04:	4b08      	ldr	r3, [pc, #32]	@ (8000b28 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000b06:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000b08:	4907      	ldr	r1, [pc, #28]	@ (8000b28 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	4313      	orrs	r3, r2
 8000b0e:	640b      	str	r3, [r1, #64]	@ 0x40
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8000b10:	4b05      	ldr	r3, [pc, #20]	@ (8000b28 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000b12:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	4013      	ands	r3, r2
 8000b18:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000b1a:	68fb      	ldr	r3, [r7, #12]
}
 8000b1c:	bf00      	nop
 8000b1e:	3714      	adds	r7, #20
 8000b20:	46bd      	mov	sp, r7
 8000b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b26:	4770      	bx	lr
 8000b28:	40023800 	.word	0x40023800

08000b2c <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000b2c:	b480      	push	{r7}
 8000b2e:	b085      	sub	sp, #20
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000b34:	4b08      	ldr	r3, [pc, #32]	@ (8000b58 <LL_APB2_GRP1_EnableClock+0x2c>)
 8000b36:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8000b38:	4907      	ldr	r1, [pc, #28]	@ (8000b58 <LL_APB2_GRP1_EnableClock+0x2c>)
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	4313      	orrs	r3, r2
 8000b3e:	644b      	str	r3, [r1, #68]	@ 0x44
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000b40:	4b05      	ldr	r3, [pc, #20]	@ (8000b58 <LL_APB2_GRP1_EnableClock+0x2c>)
 8000b42:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	4013      	ands	r3, r2
 8000b48:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000b4a:	68fb      	ldr	r3, [r7, #12]
}
 8000b4c:	bf00      	nop
 8000b4e:	3714      	adds	r7, #20
 8000b50:	46bd      	mov	sp, r7
 8000b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b56:	4770      	bx	lr
 8000b58:	40023800 	.word	0x40023800

08000b5c <LL_SYSCFG_SetEXTISource>:
  *         @arg @ref LL_SYSCFG_EXTI_LINE14
  *         @arg @ref LL_SYSCFG_EXTI_LINE15
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_SetEXTISource(uint32_t Port, uint32_t Line)
{
 8000b5c:	b480      	push	{r7}
 8000b5e:	b087      	sub	sp, #28
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	6078      	str	r0, [r7, #4]
 8000b64:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SYSCFG->EXTICR[Line & 0xFF], (Line >> 16), Port << POSITION_VAL((Line >> 16)));
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	4915      	ldr	r1, [pc, #84]	@ (8000bc0 <LL_SYSCFG_SetEXTISource+0x64>)
 8000b6a:	683a      	ldr	r2, [r7, #0]
 8000b6c:	b2d2      	uxtb	r2, r2
 8000b6e:	3202      	adds	r2, #2
 8000b70:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8000b74:	683a      	ldr	r2, [r7, #0]
 8000b76:	0c12      	lsrs	r2, r2, #16
 8000b78:	43d2      	mvns	r2, r2
 8000b7a:	4011      	ands	r1, r2
 8000b7c:	683a      	ldr	r2, [r7, #0]
 8000b7e:	0c12      	lsrs	r2, r2, #16
 8000b80:	613a      	str	r2, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000b82:	693a      	ldr	r2, [r7, #16]
 8000b84:	fa92 f2a2 	rbit	r2, r2
 8000b88:	60fa      	str	r2, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000b8a:	68fa      	ldr	r2, [r7, #12]
 8000b8c:	617a      	str	r2, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8000b8e:	697a      	ldr	r2, [r7, #20]
 8000b90:	2a00      	cmp	r2, #0
 8000b92:	d101      	bne.n	8000b98 <LL_SYSCFG_SetEXTISource+0x3c>
  {
    return 32U;
 8000b94:	2220      	movs	r2, #32
 8000b96:	e003      	b.n	8000ba0 <LL_SYSCFG_SetEXTISource+0x44>
  }
  return __builtin_clz(value);
 8000b98:	697a      	ldr	r2, [r7, #20]
 8000b9a:	fab2 f282 	clz	r2, r2
 8000b9e:	b2d2      	uxtb	r2, r2
 8000ba0:	fa03 f202 	lsl.w	r2, r3, r2
 8000ba4:	4806      	ldr	r0, [pc, #24]	@ (8000bc0 <LL_SYSCFG_SetEXTISource+0x64>)
 8000ba6:	683b      	ldr	r3, [r7, #0]
 8000ba8:	b2db      	uxtb	r3, r3
 8000baa:	430a      	orrs	r2, r1
 8000bac:	3302      	adds	r3, #2
 8000bae:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 8000bb2:	bf00      	nop
 8000bb4:	371c      	adds	r7, #28
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bbc:	4770      	bx	lr
 8000bbe:	bf00      	nop
 8000bc0:	40013800 	.word	0x40013800

08000bc4 <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_14
  *         @arg @ref LL_FLASH_LATENCY_15
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 8000bc4:	b480      	push	{r7}
 8000bc6:	b083      	sub	sp, #12
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8000bcc:	4b06      	ldr	r3, [pc, #24]	@ (8000be8 <LL_FLASH_SetLatency+0x24>)
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	f023 020f 	bic.w	r2, r3, #15
 8000bd4:	4904      	ldr	r1, [pc, #16]	@ (8000be8 <LL_FLASH_SetLatency+0x24>)
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	4313      	orrs	r3, r2
 8000bda:	600b      	str	r3, [r1, #0]
}
 8000bdc:	bf00      	nop
 8000bde:	370c      	adds	r7, #12
 8000be0:	46bd      	mov	sp, r7
 8000be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be6:	4770      	bx	lr
 8000be8:	40023c00 	.word	0x40023c00

08000bec <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_13
  *         @arg @ref LL_FLASH_LATENCY_14
  *         @arg @ref LL_FLASH_LATENCY_15
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 8000bec:	b480      	push	{r7}
 8000bee:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8000bf0:	4b04      	ldr	r3, [pc, #16]	@ (8000c04 <LL_FLASH_GetLatency+0x18>)
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	f003 030f 	and.w	r3, r3, #15
}
 8000bf8:	4618      	mov	r0, r3
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c00:	4770      	bx	lr
 8000c02:	bf00      	nop
 8000c04:	40023c00 	.word	0x40023c00

08000c08 <LL_PWR_DisableOverDriveMode>:
  * @brief  Disable Over drive Mode
  * @rmtoll CR    ODEN       LL_PWR_DisableOverDriveMode
  * @retval None
  */
__STATIC_INLINE void LL_PWR_DisableOverDriveMode(void)
{
 8000c08:	b480      	push	{r7}
 8000c0a:	af00      	add	r7, sp, #0
  CLEAR_BIT(PWR->CR, PWR_CR_ODEN);
 8000c0c:	4b05      	ldr	r3, [pc, #20]	@ (8000c24 <LL_PWR_DisableOverDriveMode+0x1c>)
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	4a04      	ldr	r2, [pc, #16]	@ (8000c24 <LL_PWR_DisableOverDriveMode+0x1c>)
 8000c12:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000c16:	6013      	str	r3, [r2, #0]
}
 8000c18:	bf00      	nop
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c20:	4770      	bx	lr
 8000c22:	bf00      	nop
 8000c24:	40007000 	.word	0x40007000

08000c28 <LL_PWR_SetRegulVoltageScaling>:
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE3
  *         (*) LL_PWR_REGU_VOLTAGE_SCALE1 is not available for STM32F401xx devices
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRegulVoltageScaling(uint32_t VoltageScaling)
{
 8000c28:	b480      	push	{r7}
 8000c2a:	b083      	sub	sp, #12
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR, PWR_CR_VOS, VoltageScaling);
 8000c30:	4b06      	ldr	r3, [pc, #24]	@ (8000c4c <LL_PWR_SetRegulVoltageScaling+0x24>)
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8000c38:	4904      	ldr	r1, [pc, #16]	@ (8000c4c <LL_PWR_SetRegulVoltageScaling+0x24>)
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	4313      	orrs	r3, r2
 8000c3e:	600b      	str	r3, [r1, #0]
}
 8000c40:	bf00      	nop
 8000c42:	370c      	adds	r7, #12
 8000c44:	46bd      	mov	sp, r7
 8000c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4a:	4770      	bx	lr
 8000c4c:	40007000 	.word	0x40007000

08000c50 <LL_PWR_IsActiveFlag_VOS>:
  * @brief  Indicate whether the Regulator is ready in the selected voltage range or if its output voltage is still changing to the required voltage level
  * @rmtoll CSR   VOS       LL_PWR_IsActiveFlag_VOS
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_VOS(void)
{
 8000c50:	b480      	push	{r7}
 8000c52:	af00      	add	r7, sp, #0
  return (READ_BIT(PWR->CSR, LL_PWR_CSR_VOS) == (LL_PWR_CSR_VOS));
 8000c54:	4b07      	ldr	r3, [pc, #28]	@ (8000c74 <LL_PWR_IsActiveFlag_VOS+0x24>)
 8000c56:	685b      	ldr	r3, [r3, #4]
 8000c58:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000c5c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8000c60:	bf0c      	ite	eq
 8000c62:	2301      	moveq	r3, #1
 8000c64:	2300      	movne	r3, #0
 8000c66:	b2db      	uxtb	r3, r3
}
 8000c68:	4618      	mov	r0, r3
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c70:	4770      	bx	lr
 8000c72:	bf00      	nop
 8000c74:	40007000 	.word	0x40007000

08000c78 <LL_SPI_SetStandard>:
{
 8000c78:	b480      	push	{r7}
 8000c7a:	b083      	sub	sp, #12
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	6078      	str	r0, [r7, #4]
 8000c80:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRF, Standard);
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	685b      	ldr	r3, [r3, #4]
 8000c86:	f023 0210 	bic.w	r2, r3, #16
 8000c8a:	683b      	ldr	r3, [r7, #0]
 8000c8c:	431a      	orrs	r2, r3
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	605a      	str	r2, [r3, #4]
}
 8000c92:	bf00      	nop
 8000c94:	370c      	adds	r7, #12
 8000c96:	46bd      	mov	sp, r7
 8000c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9c:	4770      	bx	lr

08000c9e <LL_USART_Enable>:
  * @rmtoll CR1          UE            LL_USART_Enable
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_Enable(USART_TypeDef *USARTx)
{
 8000c9e:	b480      	push	{r7}
 8000ca0:	b083      	sub	sp, #12
 8000ca2:	af00      	add	r7, sp, #0
 8000ca4:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	68db      	ldr	r3, [r3, #12]
 8000caa:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	60da      	str	r2, [r3, #12]
}
 8000cb2:	bf00      	nop
 8000cb4:	370c      	adds	r7, #12
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cbc:	4770      	bx	lr

08000cbe <LL_USART_ConfigAsyncMode>:
  *         CR3          HDSEL         LL_USART_ConfigAsyncMode
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ConfigAsyncMode(USART_TypeDef *USARTx)
{
 8000cbe:	b480      	push	{r7}
 8000cc0:	b083      	sub	sp, #12
 8000cc2:	af00      	add	r7, sp, #0
 8000cc4:	6078      	str	r0, [r7, #4]
  /* In Asynchronous mode, the following bits must be kept cleared:
  - LINEN, CLKEN bits in the USART_CR2 register,
  - SCEN, IREN and HDSEL bits in the USART_CR3 register.*/
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	691b      	ldr	r3, [r3, #16]
 8000cca:	f423 4290 	bic.w	r2, r3, #18432	@ 0x4800
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	695b      	ldr	r3, [r3, #20]
 8000cd6:	f023 022a 	bic.w	r2, r3, #42	@ 0x2a
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	615a      	str	r2, [r3, #20]
}
 8000cde:	bf00      	nop
 8000ce0:	370c      	adds	r7, #12
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce8:	4770      	bx	lr

08000cea <LL_GPIO_SetPinMode>:
{
 8000cea:	b480      	push	{r7}
 8000cec:	b08b      	sub	sp, #44	@ 0x2c
 8000cee:	af00      	add	r7, sp, #0
 8000cf0:	60f8      	str	r0, [r7, #12]
 8000cf2:	60b9      	str	r1, [r7, #8]
 8000cf4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8000cf6:	6879      	ldr	r1, [r7, #4]
 8000cf8:	68fb      	ldr	r3, [r7, #12]
 8000cfa:	681a      	ldr	r2, [r3, #0]
 8000cfc:	68bb      	ldr	r3, [r7, #8]
 8000cfe:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d00:	697b      	ldr	r3, [r7, #20]
 8000d02:	fa93 f3a3 	rbit	r3, r3
 8000d06:	613b      	str	r3, [r7, #16]
  return result;
 8000d08:	693b      	ldr	r3, [r7, #16]
 8000d0a:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8000d0c:	69bb      	ldr	r3, [r7, #24]
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d101      	bne.n	8000d16 <LL_GPIO_SetPinMode+0x2c>
    return 32U;
 8000d12:	2320      	movs	r3, #32
 8000d14:	e003      	b.n	8000d1e <LL_GPIO_SetPinMode+0x34>
  return __builtin_clz(value);
 8000d16:	69bb      	ldr	r3, [r7, #24]
 8000d18:	fab3 f383 	clz	r3, r3
 8000d1c:	b2db      	uxtb	r3, r3
 8000d1e:	005b      	lsls	r3, r3, #1
 8000d20:	2003      	movs	r0, #3
 8000d22:	fa00 f303 	lsl.w	r3, r0, r3
 8000d26:	43db      	mvns	r3, r3
 8000d28:	401a      	ands	r2, r3
 8000d2a:	68bb      	ldr	r3, [r7, #8]
 8000d2c:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d2e:	6a3b      	ldr	r3, [r7, #32]
 8000d30:	fa93 f3a3 	rbit	r3, r3
 8000d34:	61fb      	str	r3, [r7, #28]
  return result;
 8000d36:	69fb      	ldr	r3, [r7, #28]
 8000d38:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8000d3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d101      	bne.n	8000d44 <LL_GPIO_SetPinMode+0x5a>
    return 32U;
 8000d40:	2320      	movs	r3, #32
 8000d42:	e003      	b.n	8000d4c <LL_GPIO_SetPinMode+0x62>
  return __builtin_clz(value);
 8000d44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d46:	fab3 f383 	clz	r3, r3
 8000d4a:	b2db      	uxtb	r3, r3
 8000d4c:	005b      	lsls	r3, r3, #1
 8000d4e:	fa01 f303 	lsl.w	r3, r1, r3
 8000d52:	431a      	orrs	r2, r3
 8000d54:	68fb      	ldr	r3, [r7, #12]
 8000d56:	601a      	str	r2, [r3, #0]
}
 8000d58:	bf00      	nop
 8000d5a:	372c      	adds	r7, #44	@ 0x2c
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d62:	4770      	bx	lr

08000d64 <LL_GPIO_SetPinPull>:
{
 8000d64:	b480      	push	{r7}
 8000d66:	b08b      	sub	sp, #44	@ 0x2c
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	60f8      	str	r0, [r7, #12]
 8000d6c:	60b9      	str	r1, [r7, #8]
 8000d6e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8000d70:	6879      	ldr	r1, [r7, #4]
 8000d72:	68fb      	ldr	r3, [r7, #12]
 8000d74:	68da      	ldr	r2, [r3, #12]
 8000d76:	68bb      	ldr	r3, [r7, #8]
 8000d78:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d7a:	697b      	ldr	r3, [r7, #20]
 8000d7c:	fa93 f3a3 	rbit	r3, r3
 8000d80:	613b      	str	r3, [r7, #16]
  return result;
 8000d82:	693b      	ldr	r3, [r7, #16]
 8000d84:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8000d86:	69bb      	ldr	r3, [r7, #24]
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	d101      	bne.n	8000d90 <LL_GPIO_SetPinPull+0x2c>
    return 32U;
 8000d8c:	2320      	movs	r3, #32
 8000d8e:	e003      	b.n	8000d98 <LL_GPIO_SetPinPull+0x34>
  return __builtin_clz(value);
 8000d90:	69bb      	ldr	r3, [r7, #24]
 8000d92:	fab3 f383 	clz	r3, r3
 8000d96:	b2db      	uxtb	r3, r3
 8000d98:	005b      	lsls	r3, r3, #1
 8000d9a:	2003      	movs	r0, #3
 8000d9c:	fa00 f303 	lsl.w	r3, r0, r3
 8000da0:	43db      	mvns	r3, r3
 8000da2:	401a      	ands	r2, r3
 8000da4:	68bb      	ldr	r3, [r7, #8]
 8000da6:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000da8:	6a3b      	ldr	r3, [r7, #32]
 8000daa:	fa93 f3a3 	rbit	r3, r3
 8000dae:	61fb      	str	r3, [r7, #28]
  return result;
 8000db0:	69fb      	ldr	r3, [r7, #28]
 8000db2:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8000db4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d101      	bne.n	8000dbe <LL_GPIO_SetPinPull+0x5a>
    return 32U;
 8000dba:	2320      	movs	r3, #32
 8000dbc:	e003      	b.n	8000dc6 <LL_GPIO_SetPinPull+0x62>
  return __builtin_clz(value);
 8000dbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000dc0:	fab3 f383 	clz	r3, r3
 8000dc4:	b2db      	uxtb	r3, r3
 8000dc6:	005b      	lsls	r3, r3, #1
 8000dc8:	fa01 f303 	lsl.w	r3, r1, r3
 8000dcc:	431a      	orrs	r2, r3
 8000dce:	68fb      	ldr	r3, [r7, #12]
 8000dd0:	60da      	str	r2, [r3, #12]
}
 8000dd2:	bf00      	nop
 8000dd4:	372c      	adds	r7, #44	@ 0x2c
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ddc:	4770      	bx	lr

08000dde <LL_GPIO_ResetOutputPin>:
{
 8000dde:	b480      	push	{r7}
 8000de0:	b083      	sub	sp, #12
 8000de2:	af00      	add	r7, sp, #0
 8000de4:	6078      	str	r0, [r7, #4]
 8000de6:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8000de8:	683b      	ldr	r3, [r7, #0]
 8000dea:	041a      	lsls	r2, r3, #16
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	619a      	str	r2, [r3, #24]
}
 8000df0:	bf00      	nop
 8000df2:	370c      	adds	r7, #12
 8000df4:	46bd      	mov	sp, r7
 8000df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfa:	4770      	bx	lr

08000dfc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b08c      	sub	sp, #48	@ 0x30
 8000e00:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
 8000e02:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8000e06:	f7ff fe91 	bl	8000b2c <LL_APB2_GRP1_EnableClock>
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 8000e0a:	f04f 5080 	mov.w	r0, #268435456	@ 0x10000000
 8000e0e:	f7ff fe75 	bl	8000afc <LL_APB1_GRP1_EnableClock>

  /* System interrupt init*/
  NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000e12:	2007      	movs	r0, #7
 8000e14:	f7ff fd38 	bl	8000888 <__NVIC_SetPriorityGrouping>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e18:	f000 f84a 	bl	8000eb0 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e1c:	f000 f968 	bl	80010f0 <_ZL12MX_GPIO_Initv>
  MX_USART2_UART_Init();
 8000e20:	f000 f916 	bl	8001050 <_ZL19MX_USART2_UART_Initv>
  MX_SPI3_Init();
 8000e24:	f000 f8b0 	bl	8000f88 <_ZL12MX_SPI3_Initv>
  /* USER CODE BEGIN 2 */
  Gpio led(GPIOA, LD2_Pin); // Example GPIO pin for LED
 8000e28:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000e2c:	2220      	movs	r2, #32
 8000e2e:	491c      	ldr	r1, [pc, #112]	@ (8000ea0 <main+0xa4>)
 8000e30:	4618      	mov	r0, r3
 8000e32:	f7ff fbb3 	bl	800059c <_ZN4GpioC1EP12GPIO_TypeDeft>

  Gpio rf_t_spi_ncs(GPIOB, LL_GPIO_PIN_12); // Example GPIO pin for SPI CS
 8000e36:	f107 0320 	add.w	r3, r7, #32
 8000e3a:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000e3e:	4919      	ldr	r1, [pc, #100]	@ (8000ea4 <main+0xa8>)
 8000e40:	4618      	mov	r0, r3
 8000e42:	f7ff fbab 	bl	800059c <_ZN4GpioC1EP12GPIO_TypeDeft>
  Gpio rf_t_enable(GPIOB, LL_GPIO_PIN_13); // Example GPIO pin for RF CE
 8000e46:	f107 0318 	add.w	r3, r7, #24
 8000e4a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000e4e:	4915      	ldr	r1, [pc, #84]	@ (8000ea4 <main+0xa8>)
 8000e50:	4618      	mov	r0, r3
 8000e52:	f7ff fba3 	bl	800059c <_ZN4GpioC1EP12GPIO_TypeDeft>

  Spi rf_t_spi(SPI3, rf_t_spi_ncs);
 8000e56:	f107 000c 	add.w	r0, r7, #12
 8000e5a:	f107 0320 	add.w	r3, r7, #32
 8000e5e:	cb0c      	ldmia	r3, {r2, r3}
 8000e60:	4911      	ldr	r1, [pc, #68]	@ (8000ea8 <main+0xac>)
 8000e62:	f7ff fc48 	bl	80006f6 <_ZN3SpiC1EP11SPI_TypeDef4Gpio>

  TransceiverRF rf_t_nRF24L01(rf_t_spi, rf_t_enable);
 8000e66:	f107 0218 	add.w	r2, r7, #24
 8000e6a:	f107 010c 	add.w	r1, r7, #12
 8000e6e:	1d3b      	adds	r3, r7, #4
 8000e70:	4618      	mov	r0, r3
 8000e72:	f000 f9cb 	bl	800120c <_ZN13TransceiverRFC1ER3SpiR4Gpio>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    if(timer>1000) {
 8000e76:	4b0d      	ldr	r3, [pc, #52]	@ (8000eac <main+0xb0>)
 8000e78:	881b      	ldrh	r3, [r3, #0]
 8000e7a:	b29b      	uxth	r3, r3
 8000e7c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000e80:	bf8c      	ite	hi
 8000e82:	2301      	movhi	r3, #1
 8000e84:	2300      	movls	r3, #0
 8000e86:	b2db      	uxtb	r3, r3
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d0f4      	beq.n	8000e76 <main+0x7a>
      led.toggle();
 8000e8c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000e90:	4618      	mov	r0, r3
 8000e92:	f7ff fbb7 	bl	8000604 <_ZN4Gpio6toggleEv>
      timer=0;
 8000e96:	4b05      	ldr	r3, [pc, #20]	@ (8000eac <main+0xb0>)
 8000e98:	2200      	movs	r2, #0
 8000e9a:	801a      	strh	r2, [r3, #0]
    if(timer>1000) {
 8000e9c:	e7eb      	b.n	8000e76 <main+0x7a>
 8000e9e:	bf00      	nop
 8000ea0:	40020000 	.word	0x40020000
 8000ea4:	40020400 	.word	0x40020400
 8000ea8:	40003c00 	.word	0x40003c00
 8000eac:	20000020 	.word	0x20000020

08000eb0 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_2);
 8000eb4:	2002      	movs	r0, #2
 8000eb6:	f7ff fe85 	bl	8000bc4 <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_2)
 8000eba:	bf00      	nop
 8000ebc:	f7ff fe96 	bl	8000bec <LL_FLASH_GetLatency>
 8000ec0:	4603      	mov	r3, r0
 8000ec2:	2b02      	cmp	r3, #2
 8000ec4:	bf14      	ite	ne
 8000ec6:	2301      	movne	r3, #1
 8000ec8:	2300      	moveq	r3, #0
 8000eca:	b2db      	uxtb	r3, r3
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d1f5      	bne.n	8000ebc <_Z18SystemClock_Configv+0xc>
  {
  }
  LL_PWR_SetRegulVoltageScaling(LL_PWR_REGU_VOLTAGE_SCALE3);
 8000ed0:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8000ed4:	f7ff fea8 	bl	8000c28 <LL_PWR_SetRegulVoltageScaling>
  LL_PWR_DisableOverDriveMode();
 8000ed8:	f7ff fe96 	bl	8000c08 <LL_PWR_DisableOverDriveMode>
  LL_RCC_HSI_SetCalibTrimming(16);
 8000edc:	2010      	movs	r0, #16
 8000ede:	f7ff fd19 	bl	8000914 <LL_RCC_HSI_SetCalibTrimming>
  LL_RCC_HSI_Enable();
 8000ee2:	f7ff fcf5 	bl	80008d0 <LL_RCC_HSI_Enable>

   /* Wait till HSI is ready */
  while(LL_RCC_HSI_IsReady() != 1)
 8000ee6:	bf00      	nop
 8000ee8:	f7ff fd02 	bl	80008f0 <LL_RCC_HSI_IsReady>
 8000eec:	4603      	mov	r3, r0
 8000eee:	2b01      	cmp	r3, #1
 8000ef0:	bf14      	ite	ne
 8000ef2:	2301      	movne	r3, #1
 8000ef4:	2300      	moveq	r3, #0
 8000ef6:	b2db      	uxtb	r3, r3
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d1f5      	bne.n	8000ee8 <_Z18SystemClock_Configv+0x38>
  {

  }
  LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSI, LL_RCC_PLLM_DIV_16, 336, LL_RCC_PLLP_DIV_4);
 8000efc:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000f00:	f44f 72a8 	mov.w	r2, #336	@ 0x150
 8000f04:	2110      	movs	r1, #16
 8000f06:	2000      	movs	r0, #0
 8000f08:	f7ff fdb2 	bl	8000a70 <LL_RCC_PLL_ConfigDomain_SYS>
  LL_RCC_PLL_Enable();
 8000f0c:	f7ff fd8c 	bl	8000a28 <LL_RCC_PLL_Enable>

   /* Wait till PLL is ready */
  while(LL_RCC_PLL_IsReady() != 1)
 8000f10:	bf00      	nop
 8000f12:	f7ff fd99 	bl	8000a48 <LL_RCC_PLL_IsReady>
 8000f16:	4603      	mov	r3, r0
 8000f18:	2b01      	cmp	r3, #1
 8000f1a:	bf14      	ite	ne
 8000f1c:	2301      	movne	r3, #1
 8000f1e:	2300      	moveq	r3, #0
 8000f20:	b2db      	uxtb	r3, r3
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d1f5      	bne.n	8000f12 <_Z18SystemClock_Configv+0x62>
  {

  }
  while (LL_PWR_IsActiveFlag_VOS() == 0)
 8000f26:	bf00      	nop
 8000f28:	f7ff fe92 	bl	8000c50 <LL_PWR_IsActiveFlag_VOS>
 8000f2c:	4603      	mov	r3, r0
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	bf0c      	ite	eq
 8000f32:	2301      	moveq	r3, #1
 8000f34:	2300      	movne	r3, #0
 8000f36:	b2db      	uxtb	r3, r3
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d1f5      	bne.n	8000f28 <_Z18SystemClock_Configv+0x78>
  {
  }
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 8000f3c:	2000      	movs	r0, #0
 8000f3e:	f7ff fd21 	bl	8000984 <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_2);
 8000f42:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8000f46:	f7ff fd31 	bl	80009ac <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
 8000f4a:	2000      	movs	r0, #0
 8000f4c:	f7ff fd42 	bl	80009d4 <LL_RCC_SetAPB2Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
 8000f50:	2002      	movs	r0, #2
 8000f52:	f7ff fcf5 	bl	8000940 <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8000f56:	bf00      	nop
 8000f58:	f7ff fd06 	bl	8000968 <LL_RCC_GetSysClkSource>
 8000f5c:	4603      	mov	r3, r0
 8000f5e:	2b08      	cmp	r3, #8
 8000f60:	bf14      	ite	ne
 8000f62:	2301      	movne	r3, #1
 8000f64:	2300      	moveq	r3, #0
 8000f66:	b2db      	uxtb	r3, r3
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d1f5      	bne.n	8000f58 <_Z18SystemClock_Configv+0xa8>
  {

  }
  LL_Init1msTick(84000000);
 8000f6c:	4805      	ldr	r0, [pc, #20]	@ (8000f84 <_Z18SystemClock_Configv+0xd4>)
 8000f6e:	f001 fc1b 	bl	80027a8 <LL_Init1msTick>
  LL_SetSystemCoreClock(84000000);
 8000f72:	4804      	ldr	r0, [pc, #16]	@ (8000f84 <_Z18SystemClock_Configv+0xd4>)
 8000f74:	f001 fc4c 	bl	8002810 <LL_SetSystemCoreClock>
  LL_RCC_SetTIMPrescaler(LL_RCC_TIM_PRESCALER_TWICE);
 8000f78:	2000      	movs	r0, #0
 8000f7a:	f7ff fd3f 	bl	80009fc <LL_RCC_SetTIMPrescaler>
}
 8000f7e:	bf00      	nop
 8000f80:	bd80      	pop	{r7, pc}
 8000f82:	bf00      	nop
 8000f84:	0501bd00 	.word	0x0501bd00

08000f88 <_ZL12MX_SPI3_Initv>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b090      	sub	sp, #64	@ 0x40
 8000f8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 0 */

  /* USER CODE END SPI3_Init 0 */

  LL_SPI_InitTypeDef SPI_InitStruct = {0};
 8000f8e:	f107 0318 	add.w	r3, r7, #24
 8000f92:	2228      	movs	r2, #40	@ 0x28
 8000f94:	2100      	movs	r1, #0
 8000f96:	4618      	mov	r0, r3
 8000f98:	f001 fc4a 	bl	8002830 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f9c:	463b      	mov	r3, r7
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	601a      	str	r2, [r3, #0]
 8000fa2:	605a      	str	r2, [r3, #4]
 8000fa4:	609a      	str	r2, [r3, #8]
 8000fa6:	60da      	str	r2, [r3, #12]
 8000fa8:	611a      	str	r2, [r3, #16]
 8000faa:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_SPI3);
 8000fac:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8000fb0:	f7ff fda4 	bl	8000afc <LL_APB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 8000fb4:	2004      	movs	r0, #4
 8000fb6:	f7ff fd89 	bl	8000acc <LL_AHB1_GRP1_EnableClock>
  /**SPI3 GPIO Configuration
  PC1   ------> SPI3_MOSI
  PC10   ------> SPI3_SCK
  PC11   ------> SPI3_MISO
  */
  GPIO_InitStruct.Pin = RF_T_SPI3_MOSI_Pin;
 8000fba:	2302      	movs	r3, #2
 8000fbc:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000fbe:	2302      	movs	r3, #2
 8000fc0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8000fc2:	2303      	movs	r3, #3
 8000fc4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000fca:	2300      	movs	r3, #0
 8000fcc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 8000fce:	2305      	movs	r3, #5
 8000fd0:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(RF_T_SPI3_MOSI_GPIO_Port, &GPIO_InitStruct);
 8000fd2:	463b      	mov	r3, r7
 8000fd4:	4619      	mov	r1, r3
 8000fd6:	481c      	ldr	r0, [pc, #112]	@ (8001048 <_ZL12MX_SPI3_Initv+0xc0>)
 8000fd8:	f000 fe74 	bl	8001cc4 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = RF_T_SPI3_SCK_Pin|RF_T_SPI3_MISO_Pin;
 8000fdc:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8000fe0:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000fe2:	2302      	movs	r3, #2
 8000fe4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8000fe6:	2303      	movs	r3, #3
 8000fe8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000fea:	2300      	movs	r3, #0
 8000fec:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000fee:	2300      	movs	r3, #0
 8000ff0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_6;
 8000ff2:	2306      	movs	r3, #6
 8000ff4:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ff6:	463b      	mov	r3, r7
 8000ff8:	4619      	mov	r1, r3
 8000ffa:	4813      	ldr	r0, [pc, #76]	@ (8001048 <_ZL12MX_SPI3_Initv+0xc0>)
 8000ffc:	f000 fe62 	bl	8001cc4 <LL_GPIO_Init>

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 8001000:	2300      	movs	r3, #0
 8001002:	61bb      	str	r3, [r7, #24]
  SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 8001004:	f44f 7382 	mov.w	r3, #260	@ 0x104
 8001008:	61fb      	str	r3, [r7, #28]
  SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 800100a:	2300      	movs	r3, #0
 800100c:	623b      	str	r3, [r7, #32]
  SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_LOW;
 800100e:	2300      	movs	r3, #0
 8001010:	627b      	str	r3, [r7, #36]	@ 0x24
  SPI_InitStruct.ClockPhase = LL_SPI_PHASE_1EDGE;
 8001012:	2300      	movs	r3, #0
 8001014:	62bb      	str	r3, [r7, #40]	@ 0x28
  SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 8001016:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800101a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV2;
 800101c:	2300      	movs	r3, #0
 800101e:	633b      	str	r3, [r7, #48]	@ 0x30
  SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 8001020:	2300      	movs	r3, #0
 8001022:	637b      	str	r3, [r7, #52]	@ 0x34
  SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 8001024:	2300      	movs	r3, #0
 8001026:	63bb      	str	r3, [r7, #56]	@ 0x38
  SPI_InitStruct.CRCPoly = 10;
 8001028:	230a      	movs	r3, #10
 800102a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  LL_SPI_Init(SPI3, &SPI_InitStruct);
 800102c:	f107 0318 	add.w	r3, r7, #24
 8001030:	4619      	mov	r1, r3
 8001032:	4806      	ldr	r0, [pc, #24]	@ (800104c <_ZL12MX_SPI3_Initv+0xc4>)
 8001034:	f001 f863 	bl	80020fe <LL_SPI_Init>
  LL_SPI_SetStandard(SPI3, LL_SPI_PROTOCOL_MOTOROLA);
 8001038:	2100      	movs	r1, #0
 800103a:	4804      	ldr	r0, [pc, #16]	@ (800104c <_ZL12MX_SPI3_Initv+0xc4>)
 800103c:	f7ff fe1c 	bl	8000c78 <LL_SPI_SetStandard>
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8001040:	bf00      	nop
 8001042:	3740      	adds	r7, #64	@ 0x40
 8001044:	46bd      	mov	sp, r7
 8001046:	bd80      	pop	{r7, pc}
 8001048:	40020800 	.word	0x40020800
 800104c:	40003c00 	.word	0x40003c00

08001050 <_ZL19MX_USART2_UART_Initv>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b08e      	sub	sp, #56	@ 0x38
 8001054:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART2_Init 0 */

  /* USER CODE END USART2_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 8001056:	f107 031c 	add.w	r3, r7, #28
 800105a:	2200      	movs	r2, #0
 800105c:	601a      	str	r2, [r3, #0]
 800105e:	605a      	str	r2, [r3, #4]
 8001060:	609a      	str	r2, [r3, #8]
 8001062:	60da      	str	r2, [r3, #12]
 8001064:	611a      	str	r2, [r3, #16]
 8001066:	615a      	str	r2, [r3, #20]
 8001068:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800106a:	1d3b      	adds	r3, r7, #4
 800106c:	2200      	movs	r2, #0
 800106e:	601a      	str	r2, [r3, #0]
 8001070:	605a      	str	r2, [r3, #4]
 8001072:	609a      	str	r2, [r3, #8]
 8001074:	60da      	str	r2, [r3, #12]
 8001076:	611a      	str	r2, [r3, #16]
 8001078:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART2);
 800107a:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 800107e:	f7ff fd3d 	bl	8000afc <LL_APB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8001082:	2001      	movs	r0, #1
 8001084:	f7ff fd22 	bl	8000acc <LL_AHB1_GRP1_EnableClock>
  /**USART2 GPIO Configuration
  PA2   ------> USART2_TX
  PA3   ------> USART2_RX
  */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001088:	230c      	movs	r3, #12
 800108a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800108c:	2302      	movs	r3, #2
 800108e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001090:	2303      	movs	r3, #3
 8001092:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001094:	2300      	movs	r3, #0
 8001096:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001098:	2300      	movs	r3, #0
 800109a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 800109c:	2307      	movs	r3, #7
 800109e:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010a0:	1d3b      	adds	r3, r7, #4
 80010a2:	4619      	mov	r1, r3
 80010a4:	4810      	ldr	r0, [pc, #64]	@ (80010e8 <_ZL19MX_USART2_UART_Initv+0x98>)
 80010a6:	f000 fe0d 	bl	8001cc4 <LL_GPIO_Init>

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 80010aa:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 80010ae:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 80010b0:	2300      	movs	r3, #0
 80010b2:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 80010b4:	2300      	movs	r3, #0
 80010b6:	627b      	str	r3, [r7, #36]	@ 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 80010b8:	2300      	movs	r3, #0
 80010ba:	62bb      	str	r3, [r7, #40]	@ 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 80010bc:	230c      	movs	r3, #12
 80010be:	62fb      	str	r3, [r7, #44]	@ 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 80010c0:	2300      	movs	r3, #0
 80010c2:	633b      	str	r3, [r7, #48]	@ 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 80010c4:	2300      	movs	r3, #0
 80010c6:	637b      	str	r3, [r7, #52]	@ 0x34
  LL_USART_Init(USART2, &USART_InitStruct);
 80010c8:	f107 031c 	add.w	r3, r7, #28
 80010cc:	4619      	mov	r1, r3
 80010ce:	4807      	ldr	r0, [pc, #28]	@ (80010ec <_ZL19MX_USART2_UART_Initv+0x9c>)
 80010d0:	f001 fad0 	bl	8002674 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART2);
 80010d4:	4805      	ldr	r0, [pc, #20]	@ (80010ec <_ZL19MX_USART2_UART_Initv+0x9c>)
 80010d6:	f7ff fdf2 	bl	8000cbe <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART2);
 80010da:	4804      	ldr	r0, [pc, #16]	@ (80010ec <_ZL19MX_USART2_UART_Initv+0x9c>)
 80010dc:	f7ff fddf 	bl	8000c9e <LL_USART_Enable>
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80010e0:	bf00      	nop
 80010e2:	3738      	adds	r7, #56	@ 0x38
 80010e4:	46bd      	mov	sp, r7
 80010e6:	bd80      	pop	{r7, pc}
 80010e8:	40020000 	.word	0x40020000
 80010ec:	40004400 	.word	0x40004400

080010f0 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b088      	sub	sp, #32
 80010f4:	af00      	add	r7, sp, #0
  LL_EXTI_InitTypeDef EXTI_InitStruct = {0};
 80010f6:	f107 0318 	add.w	r3, r7, #24
 80010fa:	2200      	movs	r2, #0
 80010fc:	601a      	str	r2, [r3, #0]
 80010fe:	605a      	str	r2, [r3, #4]
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001100:	463b      	mov	r3, r7
 8001102:	2200      	movs	r2, #0
 8001104:	601a      	str	r2, [r3, #0]
 8001106:	605a      	str	r2, [r3, #4]
 8001108:	609a      	str	r2, [r3, #8]
 800110a:	60da      	str	r2, [r3, #12]
 800110c:	611a      	str	r2, [r3, #16]
 800110e:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 8001110:	2004      	movs	r0, #4
 8001112:	f7ff fcdb 	bl	8000acc <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOH);
 8001116:	2080      	movs	r0, #128	@ 0x80
 8001118:	f7ff fcd8 	bl	8000acc <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 800111c:	2001      	movs	r0, #1
 800111e:	f7ff fcd5 	bl	8000acc <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8001122:	2002      	movs	r0, #2
 8001124:	f7ff fcd2 	bl	8000acc <LL_AHB1_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(LD2_GPIO_Port, LD2_Pin);
 8001128:	2120      	movs	r1, #32
 800112a:	4833      	ldr	r0, [pc, #204]	@ (80011f8 <_ZL12MX_GPIO_Initv+0x108>)
 800112c:	f7ff fe57 	bl	8000dde <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GPIOB, RF_T_SPI3_NCS_Pin|RF_T_ENABLE_Pin);
 8001130:	f44f 5140 	mov.w	r1, #12288	@ 0x3000
 8001134:	4831      	ldr	r0, [pc, #196]	@ (80011fc <_ZL12MX_GPIO_Initv+0x10c>)
 8001136:	f7ff fe52 	bl	8000dde <LL_GPIO_ResetOutputPin>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTC, LL_SYSCFG_EXTI_LINE13);
 800113a:	4931      	ldr	r1, [pc, #196]	@ (8001200 <_ZL12MX_GPIO_Initv+0x110>)
 800113c:	2002      	movs	r0, #2
 800113e:	f7ff fd0d 	bl	8000b5c <LL_SYSCFG_SetEXTISource>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTB, LL_SYSCFG_EXTI_LINE14);
 8001142:	4930      	ldr	r1, [pc, #192]	@ (8001204 <_ZL12MX_GPIO_Initv+0x114>)
 8001144:	2001      	movs	r0, #1
 8001146:	f7ff fd09 	bl	8000b5c <LL_SYSCFG_SetEXTISource>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_13;
 800114a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800114e:	61bb      	str	r3, [r7, #24]
  EXTI_InitStruct.LineCommand = ENABLE;
 8001150:	2301      	movs	r3, #1
 8001152:	773b      	strb	r3, [r7, #28]
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8001154:	2300      	movs	r3, #0
 8001156:	777b      	strb	r3, [r7, #29]
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 8001158:	2302      	movs	r3, #2
 800115a:	77bb      	strb	r3, [r7, #30]
  LL_EXTI_Init(&EXTI_InitStruct);
 800115c:	f107 0318 	add.w	r3, r7, #24
 8001160:	4618      	mov	r0, r3
 8001162:	f000 fbe5 	bl	8001930 <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_14;
 8001166:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800116a:	61bb      	str	r3, [r7, #24]
  EXTI_InitStruct.LineCommand = ENABLE;
 800116c:	2301      	movs	r3, #1
 800116e:	773b      	strb	r3, [r7, #28]
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8001170:	2300      	movs	r3, #0
 8001172:	777b      	strb	r3, [r7, #29]
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_RISING;
 8001174:	2301      	movs	r3, #1
 8001176:	77bb      	strb	r3, [r7, #30]
  LL_EXTI_Init(&EXTI_InitStruct);
 8001178:	f107 0318 	add.w	r3, r7, #24
 800117c:	4618      	mov	r0, r3
 800117e:	f000 fbd7 	bl	8001930 <LL_EXTI_Init>

  /**/
  LL_GPIO_SetPinPull(B1_GPIO_Port, B1_Pin, LL_GPIO_PULL_NO);
 8001182:	2200      	movs	r2, #0
 8001184:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001188:	481f      	ldr	r0, [pc, #124]	@ (8001208 <_ZL12MX_GPIO_Initv+0x118>)
 800118a:	f7ff fdeb 	bl	8000d64 <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(RF_T_NINT_GPIO_Port, RF_T_NINT_Pin, LL_GPIO_PULL_NO);
 800118e:	2200      	movs	r2, #0
 8001190:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001194:	4819      	ldr	r0, [pc, #100]	@ (80011fc <_ZL12MX_GPIO_Initv+0x10c>)
 8001196:	f7ff fde5 	bl	8000d64 <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinMode(B1_GPIO_Port, B1_Pin, LL_GPIO_MODE_INPUT);
 800119a:	2200      	movs	r2, #0
 800119c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80011a0:	4819      	ldr	r0, [pc, #100]	@ (8001208 <_ZL12MX_GPIO_Initv+0x118>)
 80011a2:	f7ff fda2 	bl	8000cea <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(RF_T_NINT_GPIO_Port, RF_T_NINT_Pin, LL_GPIO_MODE_INPUT);
 80011a6:	2200      	movs	r2, #0
 80011a8:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80011ac:	4813      	ldr	r0, [pc, #76]	@ (80011fc <_ZL12MX_GPIO_Initv+0x10c>)
 80011ae:	f7ff fd9c 	bl	8000cea <LL_GPIO_SetPinMode>

  /**/
  GPIO_InitStruct.Pin = LD2_Pin;
 80011b2:	2320      	movs	r3, #32
 80011b4:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80011b6:	2301      	movs	r3, #1
 80011b8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80011ba:	2300      	movs	r3, #0
 80011bc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80011be:	2300      	movs	r3, #0
 80011c0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80011c2:	2300      	movs	r3, #0
 80011c4:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80011c6:	463b      	mov	r3, r7
 80011c8:	4619      	mov	r1, r3
 80011ca:	480b      	ldr	r0, [pc, #44]	@ (80011f8 <_ZL12MX_GPIO_Initv+0x108>)
 80011cc:	f000 fd7a 	bl	8001cc4 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = RF_T_SPI3_NCS_Pin|RF_T_ENABLE_Pin;
 80011d0:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 80011d4:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80011d6:	2301      	movs	r3, #1
 80011d8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80011da:	2300      	movs	r3, #0
 80011dc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80011de:	2300      	movs	r3, #0
 80011e0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80011e2:	2300      	movs	r3, #0
 80011e4:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011e6:	463b      	mov	r3, r7
 80011e8:	4619      	mov	r1, r3
 80011ea:	4804      	ldr	r0, [pc, #16]	@ (80011fc <_ZL12MX_GPIO_Initv+0x10c>)
 80011ec:	f000 fd6a 	bl	8001cc4 <LL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80011f0:	bf00      	nop
 80011f2:	3720      	adds	r7, #32
 80011f4:	46bd      	mov	sp, r7
 80011f6:	bd80      	pop	{r7, pc}
 80011f8:	40020000 	.word	0x40020000
 80011fc:	40020400 	.word	0x40020400
 8001200:	00f00003 	.word	0x00f00003
 8001204:	0f000003 	.word	0x0f000003
 8001208:	40020800 	.word	0x40020800

0800120c <_ZN13TransceiverRFC1ER3SpiR4Gpio>:
#include "mw_transceiver_rf.hpp"

TransceiverRF::TransceiverRF(Spi& spi, Gpio& enable)
 800120c:	b580      	push	{r7, lr}
 800120e:	b084      	sub	sp, #16
 8001210:	af00      	add	r7, sp, #0
 8001212:	60f8      	str	r0, [r7, #12]
 8001214:	60b9      	str	r1, [r7, #8]
 8001216:	607a      	str	r2, [r7, #4]
    : m_spi(spi), m_enable(enable) {
 8001218:	68fb      	ldr	r3, [r7, #12]
 800121a:	68ba      	ldr	r2, [r7, #8]
 800121c:	601a      	str	r2, [r3, #0]
 800121e:	68fb      	ldr	r3, [r7, #12]
 8001220:	687a      	ldr	r2, [r7, #4]
 8001222:	605a      	str	r2, [r3, #4]
	m_spi.enable();
 8001224:	68fb      	ldr	r3, [r7, #12]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	4618      	mov	r0, r3
 800122a:	f7ff fb11 	bl	8000850 <_ZN3Spi6enableEv>
    tx_init(2500, air_data_rate::_1Mbps);
 800122e:	2200      	movs	r2, #0
 8001230:	f640 11c4 	movw	r1, #2500	@ 0x9c4
 8001234:	68f8      	ldr	r0, [r7, #12]
 8001236:	f000 fa35 	bl	80016a4 <_ZN13TransceiverRF7tx_initEt13air_data_rate>
}
 800123a:	68fb      	ldr	r3, [r7, #12]
 800123c:	4618      	mov	r0, r3
 800123e:	3710      	adds	r7, #16
 8001240:	46bd      	mov	sp, r7
 8001242:	bd80      	pop	{r7, pc}

08001244 <_ZN13TransceiverRF13read_registerEh>:

// Reads a register from the via SPI.
uint8_t TransceiverRF::read_register(uint8_t reg)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b084      	sub	sp, #16
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
 800124c:	460b      	mov	r3, r1
 800124e:	70fb      	strb	r3, [r7, #3]
    uint8_t command = CMD_R_REGISTER | reg;
 8001250:	78fb      	ldrb	r3, [r7, #3]
 8001252:	73fb      	strb	r3, [r7, #15]
    uint8_t status;
    uint8_t read_val;

    m_spi.select();
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	4618      	mov	r0, r3
 800125a:	f7ff fa75 	bl	8000748 <_ZN3Spi6selectEv>
    m_spi.writeRead(command, &status, 1);
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	6818      	ldr	r0, [r3, #0]
 8001262:	f107 020e 	add.w	r2, r7, #14
 8001266:	7bf9      	ldrb	r1, [r7, #15]
 8001268:	2301      	movs	r3, #1
 800126a:	f7ff fa9b 	bl	80007a4 <_ZN3Spi9writeReadEhPhh>
    m_spi.deselect();
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	4618      	mov	r0, r3
 8001274:	f7ff fa58 	bl	8000728 <_ZN3Spi8deselectEv>

    LL_mDelay(1);
 8001278:	2001      	movs	r0, #1
 800127a:	f001 faa3 	bl	80027c4 <LL_mDelay>

    m_spi.select();
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	4618      	mov	r0, r3
 8001284:	f7ff fa60 	bl	8000748 <_ZN3Spi6selectEv>
    m_spi.writeRead(DUMMY, &read_val, 1);
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	6818      	ldr	r0, [r3, #0]
 800128c:	f107 020d 	add.w	r2, r7, #13
 8001290:	2301      	movs	r3, #1
 8001292:	2100      	movs	r1, #0
 8001294:	f7ff fa86 	bl	80007a4 <_ZN3Spi9writeReadEhPhh>
    m_spi.deselect();
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	4618      	mov	r0, r3
 800129e:	f7ff fa43 	bl	8000728 <_ZN3Spi8deselectEv>

    return read_val;
 80012a2:	7b7b      	ldrb	r3, [r7, #13]
}
 80012a4:	4618      	mov	r0, r3
 80012a6:	3710      	adds	r7, #16
 80012a8:	46bd      	mov	sp, r7
 80012aa:	bd80      	pop	{r7, pc}

080012ac <_ZN13TransceiverRF14write_registerEhh>:

// Writes a value to a register via SPI.
uint8_t TransceiverRF::write_register(uint8_t reg, uint8_t value)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b084      	sub	sp, #16
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]
 80012b4:	460b      	mov	r3, r1
 80012b6:	70fb      	strb	r3, [r7, #3]
 80012b8:	4613      	mov	r3, r2
 80012ba:	70bb      	strb	r3, [r7, #2]
    uint8_t command = CMD_W_REGISTER | reg;
 80012bc:	78fb      	ldrb	r3, [r7, #3]
 80012be:	f043 0320 	orr.w	r3, r3, #32
 80012c2:	73fb      	strb	r3, [r7, #15]
    uint8_t status;
    uint8_t write_val = value;
 80012c4:	78bb      	ldrb	r3, [r7, #2]
 80012c6:	737b      	strb	r3, [r7, #13]
    m_spi.select();
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	4618      	mov	r0, r3
 80012ce:	f7ff fa3b 	bl	8000748 <_ZN3Spi6selectEv>
    m_spi.writeRead(command, &status, 1);
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	6818      	ldr	r0, [r3, #0]
 80012d6:	f107 020e 	add.w	r2, r7, #14
 80012da:	7bf9      	ldrb	r1, [r7, #15]
 80012dc:	2301      	movs	r3, #1
 80012de:	f7ff fa61 	bl	80007a4 <_ZN3Spi9writeReadEhPhh>
    m_spi.deselect();
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	4618      	mov	r0, r3
 80012e8:	f7ff fa1e 	bl	8000728 <_ZN3Spi8deselectEv>

    LL_mDelay(1);
 80012ec:	2001      	movs	r0, #1
 80012ee:	f001 fa69 	bl	80027c4 <LL_mDelay>

    m_spi.select();
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	4618      	mov	r0, r3
 80012f8:	f7ff fa26 	bl	8000748 <_ZN3Spi6selectEv>
    m_spi.write(&write_val, 1);
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	f107 010d 	add.w	r1, r7, #13
 8001304:	2201      	movs	r2, #1
 8001306:	4618      	mov	r0, r3
 8001308:	f7ff fa2e 	bl	8000768 <_ZN3Spi5writeEPhh>
    m_spi.deselect();
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	4618      	mov	r0, r3
 8001312:	f7ff fa09 	bl	8000728 <_ZN3Spi8deselectEv>
    
    return write_val;
 8001316:	7b7b      	ldrb	r3, [r7, #13]
}
 8001318:	4618      	mov	r0, r3
 800131a:	3710      	adds	r7, #16
 800131c:	46bd      	mov	sp, r7
 800131e:	bd80      	pop	{r7, pc}

08001320 <_ZN13TransceiverRF13flush_rx_fifoEv>:

// Flushes the RX FIFO buffer
void TransceiverRF::flush_rx_fifo()
{
 8001320:	b580      	push	{r7, lr}
 8001322:	b084      	sub	sp, #16
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]
    uint8_t command = CMD_FLUSH_RX;
 8001328:	23e2      	movs	r3, #226	@ 0xe2
 800132a:	73fb      	strb	r3, [r7, #15]
    uint8_t status;

    m_spi.select();
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	4618      	mov	r0, r3
 8001332:	f7ff fa09 	bl	8000748 <_ZN3Spi6selectEv>
    m_spi.writeRead(command, &status, 1);
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	6818      	ldr	r0, [r3, #0]
 800133a:	f107 020e 	add.w	r2, r7, #14
 800133e:	7bf9      	ldrb	r1, [r7, #15]
 8001340:	2301      	movs	r3, #1
 8001342:	f7ff fa2f 	bl	80007a4 <_ZN3Spi9writeReadEhPhh>
    m_spi.deselect();
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	4618      	mov	r0, r3
 800134c:	f7ff f9ec 	bl	8000728 <_ZN3Spi8deselectEv>
}
 8001350:	bf00      	nop
 8001352:	3710      	adds	r7, #16
 8001354:	46bd      	mov	sp, r7
 8001356:	bd80      	pop	{r7, pc}

08001358 <_ZN13TransceiverRF13flush_tx_fifoEv>:

// Flushes the TX FIFO buffer
void TransceiverRF::flush_tx_fifo()
{
 8001358:	b580      	push	{r7, lr}
 800135a:	b084      	sub	sp, #16
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]
    uint8_t command = CMD_FLUSH_TX;
 8001360:	23e1      	movs	r3, #225	@ 0xe1
 8001362:	73fb      	strb	r3, [r7, #15]
    uint8_t status;

    m_spi.select();
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	4618      	mov	r0, r3
 800136a:	f7ff f9ed 	bl	8000748 <_ZN3Spi6selectEv>
    m_spi.writeRead(command, &status, 1);
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	6818      	ldr	r0, [r3, #0]
 8001372:	f107 020e 	add.w	r2, r7, #14
 8001376:	7bf9      	ldrb	r1, [r7, #15]
 8001378:	2301      	movs	r3, #1
 800137a:	f7ff fa13 	bl	80007a4 <_ZN3Spi9writeReadEhPhh>
    m_spi.deselect();
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	4618      	mov	r0, r3
 8001384:	f7ff f9d0 	bl	8000728 <_ZN3Spi8deselectEv>
}
 8001388:	bf00      	nop
 800138a:	3710      	adds	r7, #16
 800138c:	46bd      	mov	sp, r7
 800138e:	bd80      	pop	{r7, pc}

08001390 <_ZN13TransceiverRF8power_upEv>:

// Powers up by setting the PWR_UP bit in CONFIG
void TransceiverRF::power_up()
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b084      	sub	sp, #16
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
    uint8_t new_config = read_register(REG_CONFIG);
 8001398:	2100      	movs	r1, #0
 800139a:	6878      	ldr	r0, [r7, #4]
 800139c:	f7ff ff52 	bl	8001244 <_ZN13TransceiverRF13read_registerEh>
 80013a0:	4603      	mov	r3, r0
 80013a2:	73fb      	strb	r3, [r7, #15]
    new_config |= 1 << 1;
 80013a4:	7bfb      	ldrb	r3, [r7, #15]
 80013a6:	f043 0302 	orr.w	r3, r3, #2
 80013aa:	73fb      	strb	r3, [r7, #15]

    write_register(REG_CONFIG, new_config);
 80013ac:	7bfb      	ldrb	r3, [r7, #15]
 80013ae:	461a      	mov	r2, r3
 80013b0:	2100      	movs	r1, #0
 80013b2:	6878      	ldr	r0, [r7, #4]
 80013b4:	f7ff ff7a 	bl	80012ac <_ZN13TransceiverRF14write_registerEhh>
}
 80013b8:	bf00      	nop
 80013ba:	3710      	adds	r7, #16
 80013bc:	46bd      	mov	sp, r7
 80013be:	bd80      	pop	{r7, pc}

080013c0 <_ZN13TransceiverRF5resetEv>:

// Resets to default configuration and clears FIFOs
void TransceiverRF::reset()
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b082      	sub	sp, #8
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
    // Reset pins
    m_spi.deselect();
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	4618      	mov	r0, r3
 80013ce:	f7ff f9ab 	bl	8000728 <_ZN3Spi8deselectEv>
    m_enable.reset();
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	685b      	ldr	r3, [r3, #4]
 80013d6:	4618      	mov	r0, r3
 80013d8:	f7ff f904 	bl	80005e4 <_ZN4Gpio5resetEv>

    // Reset registers
    write_register(REG_CONFIG, 0x08);
 80013dc:	2208      	movs	r2, #8
 80013de:	2100      	movs	r1, #0
 80013e0:	6878      	ldr	r0, [r7, #4]
 80013e2:	f7ff ff63 	bl	80012ac <_ZN13TransceiverRF14write_registerEhh>
    write_register(REG_EN_AA, 0x3F);
 80013e6:	223f      	movs	r2, #63	@ 0x3f
 80013e8:	2101      	movs	r1, #1
 80013ea:	6878      	ldr	r0, [r7, #4]
 80013ec:	f7ff ff5e 	bl	80012ac <_ZN13TransceiverRF14write_registerEhh>
    write_register(REG_EN_RXADDR, 0x03);
 80013f0:	2203      	movs	r2, #3
 80013f2:	2102      	movs	r1, #2
 80013f4:	6878      	ldr	r0, [r7, #4]
 80013f6:	f7ff ff59 	bl	80012ac <_ZN13TransceiverRF14write_registerEhh>
    write_register(REG_SETUP_AW, 0x03);
 80013fa:	2203      	movs	r2, #3
 80013fc:	2103      	movs	r1, #3
 80013fe:	6878      	ldr	r0, [r7, #4]
 8001400:	f7ff ff54 	bl	80012ac <_ZN13TransceiverRF14write_registerEhh>
    write_register(REG_SETUP_RETR, 0x03);
 8001404:	2203      	movs	r2, #3
 8001406:	2104      	movs	r1, #4
 8001408:	6878      	ldr	r0, [r7, #4]
 800140a:	f7ff ff4f 	bl	80012ac <_ZN13TransceiverRF14write_registerEhh>
    write_register(REG_RF_CH, 0x02);
 800140e:	2202      	movs	r2, #2
 8001410:	2105      	movs	r1, #5
 8001412:	6878      	ldr	r0, [r7, #4]
 8001414:	f7ff ff4a 	bl	80012ac <_ZN13TransceiverRF14write_registerEhh>
    write_register(REG_RF_SETUP, 0x07);
 8001418:	2207      	movs	r2, #7
 800141a:	2106      	movs	r1, #6
 800141c:	6878      	ldr	r0, [r7, #4]
 800141e:	f7ff ff45 	bl	80012ac <_ZN13TransceiverRF14write_registerEhh>
    write_register(REG_STATUS, 0x7E);
 8001422:	227e      	movs	r2, #126	@ 0x7e
 8001424:	2107      	movs	r1, #7
 8001426:	6878      	ldr	r0, [r7, #4]
 8001428:	f7ff ff40 	bl	80012ac <_ZN13TransceiverRF14write_registerEhh>
    write_register(REG_RX_PW_P0, 0x00);
 800142c:	2200      	movs	r2, #0
 800142e:	2111      	movs	r1, #17
 8001430:	6878      	ldr	r0, [r7, #4]
 8001432:	f7ff ff3b 	bl	80012ac <_ZN13TransceiverRF14write_registerEhh>
    write_register(REG_RX_PW_P0, 0x00);
 8001436:	2200      	movs	r2, #0
 8001438:	2111      	movs	r1, #17
 800143a:	6878      	ldr	r0, [r7, #4]
 800143c:	f7ff ff36 	bl	80012ac <_ZN13TransceiverRF14write_registerEhh>
    write_register(REG_RX_PW_P1, 0x00);
 8001440:	2200      	movs	r2, #0
 8001442:	2112      	movs	r1, #18
 8001444:	6878      	ldr	r0, [r7, #4]
 8001446:	f7ff ff31 	bl	80012ac <_ZN13TransceiverRF14write_registerEhh>
    write_register(REG_RX_PW_P2, 0x00);
 800144a:	2200      	movs	r2, #0
 800144c:	2113      	movs	r1, #19
 800144e:	6878      	ldr	r0, [r7, #4]
 8001450:	f7ff ff2c 	bl	80012ac <_ZN13TransceiverRF14write_registerEhh>
    write_register(REG_RX_PW_P3, 0x00);
 8001454:	2200      	movs	r2, #0
 8001456:	2114      	movs	r1, #20
 8001458:	6878      	ldr	r0, [r7, #4]
 800145a:	f7ff ff27 	bl	80012ac <_ZN13TransceiverRF14write_registerEhh>
    write_register(REG_RX_PW_P4, 0x00);
 800145e:	2200      	movs	r2, #0
 8001460:	2115      	movs	r1, #21
 8001462:	6878      	ldr	r0, [r7, #4]
 8001464:	f7ff ff22 	bl	80012ac <_ZN13TransceiverRF14write_registerEhh>
    write_register(REG_RX_PW_P5, 0x00);
 8001468:	2200      	movs	r2, #0
 800146a:	2116      	movs	r1, #22
 800146c:	6878      	ldr	r0, [r7, #4]
 800146e:	f7ff ff1d 	bl	80012ac <_ZN13TransceiverRF14write_registerEhh>
    write_register(REG_FIFO_STATUS, 0x11);
 8001472:	2211      	movs	r2, #17
 8001474:	2117      	movs	r1, #23
 8001476:	6878      	ldr	r0, [r7, #4]
 8001478:	f7ff ff18 	bl	80012ac <_ZN13TransceiverRF14write_registerEhh>
    write_register(REG_DYNPD, 0x00);
 800147c:	2200      	movs	r2, #0
 800147e:	211c      	movs	r1, #28
 8001480:	6878      	ldr	r0, [r7, #4]
 8001482:	f7ff ff13 	bl	80012ac <_ZN13TransceiverRF14write_registerEhh>
    write_register(REG_FEATURE, 0x00);
 8001486:	2200      	movs	r2, #0
 8001488:	211d      	movs	r1, #29
 800148a:	6878      	ldr	r0, [r7, #4]
 800148c:	f7ff ff0e 	bl	80012ac <_ZN13TransceiverRF14write_registerEhh>

    // Reset FIFO
    flush_rx_fifo();
 8001490:	6878      	ldr	r0, [r7, #4]
 8001492:	f7ff ff45 	bl	8001320 <_ZN13TransceiverRF13flush_rx_fifoEv>
    flush_tx_fifo();
 8001496:	6878      	ldr	r0, [r7, #4]
 8001498:	f7ff ff5e 	bl	8001358 <_ZN13TransceiverRF13flush_tx_fifoEv>
}
 800149c:	bf00      	nop
 800149e:	3708      	adds	r7, #8
 80014a0:	46bd      	mov	sp, r7
 80014a2:	bd80      	pop	{r7, pc}

080014a4 <_ZN13TransceiverRF14set_rf_channelEt>:
    write_register(REG_RX_PW_P0, bytes);
}

// Sets the RF channel (frequency) for the transceiver
void TransceiverRF::set_rf_channel(channel MHz)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b084      	sub	sp, #16
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
 80014ac:	460b      	mov	r3, r1
 80014ae:	807b      	strh	r3, [r7, #2]
	uint16_t new_rf_ch = MHz - 2400;
 80014b0:	887b      	ldrh	r3, [r7, #2]
 80014b2:	f5a3 6316 	sub.w	r3, r3, #2400	@ 0x960
 80014b6:	81fb      	strh	r3, [r7, #14]
    write_register(REG_RF_CH, new_rf_ch);
 80014b8:	89fb      	ldrh	r3, [r7, #14]
 80014ba:	b2db      	uxtb	r3, r3
 80014bc:	461a      	mov	r2, r3
 80014be:	2105      	movs	r1, #5
 80014c0:	6878      	ldr	r0, [r7, #4]
 80014c2:	f7ff fef3 	bl	80012ac <_ZN13TransceiverRF14write_registerEhh>
}
 80014c6:	bf00      	nop
 80014c8:	3710      	adds	r7, #16
 80014ca:	46bd      	mov	sp, r7
 80014cc:	bd80      	pop	{r7, pc}

080014ce <_ZN13TransceiverRF20set_rf_air_data_rateE13air_data_rate>:

// Sets the air data rate (bitrate) for the transceiver
void TransceiverRF::set_rf_air_data_rate(air_data_rate bps)
{
 80014ce:	b580      	push	{r7, lr}
 80014d0:	b084      	sub	sp, #16
 80014d2:	af00      	add	r7, sp, #0
 80014d4:	6078      	str	r0, [r7, #4]
 80014d6:	460b      	mov	r3, r1
 80014d8:	70fb      	strb	r3, [r7, #3]
    // Set value to 0
    uint8_t new_rf_setup = read_register(REG_RF_SETUP) & 0xD7;
 80014da:	2106      	movs	r1, #6
 80014dc:	6878      	ldr	r0, [r7, #4]
 80014de:	f7ff feb1 	bl	8001244 <_ZN13TransceiverRF13read_registerEh>
 80014e2:	4603      	mov	r3, r0
 80014e4:	f023 0328 	bic.w	r3, r3, #40	@ 0x28
 80014e8:	73fb      	strb	r3, [r7, #15]
    
    switch(bps)
 80014ea:	78fb      	ldrb	r3, [r7, #3]
 80014ec:	2b02      	cmp	r3, #2
 80014ee:	d00d      	beq.n	800150c <_ZN13TransceiverRF20set_rf_air_data_rateE13air_data_rate+0x3e>
 80014f0:	78fb      	ldrb	r3, [r7, #3]
 80014f2:	2b02      	cmp	r3, #2
 80014f4:	d810      	bhi.n	8001518 <_ZN13TransceiverRF20set_rf_air_data_rateE13air_data_rate+0x4a>
 80014f6:	78fb      	ldrb	r3, [r7, #3]
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d00c      	beq.n	8001516 <_ZN13TransceiverRF20set_rf_air_data_rateE13air_data_rate+0x48>
 80014fc:	78fb      	ldrb	r3, [r7, #3]
 80014fe:	2b01      	cmp	r3, #1
 8001500:	d10a      	bne.n	8001518 <_ZN13TransceiverRF20set_rf_air_data_rateE13air_data_rate+0x4a>
    {
        case air_data_rate::_1Mbps: 
            break;
        case air_data_rate::_2Mbps: 
            new_rf_setup |= 1 << 3;
 8001502:	7bfb      	ldrb	r3, [r7, #15]
 8001504:	f043 0308 	orr.w	r3, r3, #8
 8001508:	73fb      	strb	r3, [r7, #15]
            break;
 800150a:	e005      	b.n	8001518 <_ZN13TransceiverRF20set_rf_air_data_rateE13air_data_rate+0x4a>
        case air_data_rate::_250kbps:
            new_rf_setup |= 1 << 5;
 800150c:	7bfb      	ldrb	r3, [r7, #15]
 800150e:	f043 0320 	orr.w	r3, r3, #32
 8001512:	73fb      	strb	r3, [r7, #15]
            break;
 8001514:	e000      	b.n	8001518 <_ZN13TransceiverRF20set_rf_air_data_rateE13air_data_rate+0x4a>
            break;
 8001516:	bf00      	nop
    }
    write_register(REG_RF_SETUP, new_rf_setup);
 8001518:	7bfb      	ldrb	r3, [r7, #15]
 800151a:	461a      	mov	r2, r3
 800151c:	2106      	movs	r1, #6
 800151e:	6878      	ldr	r0, [r7, #4]
 8001520:	f7ff fec4 	bl	80012ac <_ZN13TransceiverRF14write_registerEhh>
}
 8001524:	bf00      	nop
 8001526:	3710      	adds	r7, #16
 8001528:	46bd      	mov	sp, r7
 800152a:	bd80      	pop	{r7, pc}

0800152c <_ZN13TransceiverRF22set_rf_tx_output_powerE12output_power>:

// Sets the RF output power
void TransceiverRF::set_rf_tx_output_power(output_power dBm)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	b084      	sub	sp, #16
 8001530:	af00      	add	r7, sp, #0
 8001532:	6078      	str	r0, [r7, #4]
 8001534:	460b      	mov	r3, r1
 8001536:	70fb      	strb	r3, [r7, #3]
    uint8_t new_rf_setup = read_register(REG_RF_SETUP) & 0xF9;
 8001538:	2106      	movs	r1, #6
 800153a:	6878      	ldr	r0, [r7, #4]
 800153c:	f7ff fe82 	bl	8001244 <_ZN13TransceiverRF13read_registerEh>
 8001540:	4603      	mov	r3, r0
 8001542:	f023 0306 	bic.w	r3, r3, #6
 8001546:	73fb      	strb	r3, [r7, #15]
    new_rf_setup |= (static_cast<uint8_t>(dBm) << 1);
 8001548:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800154c:	005b      	lsls	r3, r3, #1
 800154e:	b25a      	sxtb	r2, r3
 8001550:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001554:	4313      	orrs	r3, r2
 8001556:	b25b      	sxtb	r3, r3
 8001558:	73fb      	strb	r3, [r7, #15]

    write_register(REG_RF_SETUP, new_rf_setup);
 800155a:	7bfb      	ldrb	r3, [r7, #15]
 800155c:	461a      	mov	r2, r3
 800155e:	2106      	movs	r1, #6
 8001560:	6878      	ldr	r0, [r7, #4]
 8001562:	f7ff fea3 	bl	80012ac <_ZN13TransceiverRF14write_registerEhh>
}
 8001566:	bf00      	nop
 8001568:	3710      	adds	r7, #16
 800156a:	46bd      	mov	sp, r7
 800156c:	bd80      	pop	{r7, pc}

0800156e <_ZN13TransceiverRF14set_crc_lengthEh>:

// Sets the CRC length (1 or 2 bytes)
void TransceiverRF::set_crc_length(length bytes)
{
 800156e:	b580      	push	{r7, lr}
 8001570:	b084      	sub	sp, #16
 8001572:	af00      	add	r7, sp, #0
 8001574:	6078      	str	r0, [r7, #4]
 8001576:	460b      	mov	r3, r1
 8001578:	70fb      	strb	r3, [r7, #3]
    uint8_t new_config = read_register(REG_CONFIG);
 800157a:	2100      	movs	r1, #0
 800157c:	6878      	ldr	r0, [r7, #4]
 800157e:	f7ff fe61 	bl	8001244 <_ZN13TransceiverRF13read_registerEh>
 8001582:	4603      	mov	r3, r0
 8001584:	73fb      	strb	r3, [r7, #15]
    
    switch(bytes)
 8001586:	78fb      	ldrb	r3, [r7, #3]
 8001588:	2b01      	cmp	r3, #1
 800158a:	d002      	beq.n	8001592 <_ZN13TransceiverRF14set_crc_lengthEh+0x24>
 800158c:	2b02      	cmp	r3, #2
 800158e:	d005      	beq.n	800159c <_ZN13TransceiverRF14set_crc_lengthEh+0x2e>
 8001590:	e009      	b.n	80015a6 <_ZN13TransceiverRF14set_crc_lengthEh+0x38>
    {
        // CRCO bit in CONFIG resiger set 0
        case 1:
            new_config &= 0xFB;
 8001592:	7bfb      	ldrb	r3, [r7, #15]
 8001594:	f023 0304 	bic.w	r3, r3, #4
 8001598:	73fb      	strb	r3, [r7, #15]
            break;
 800159a:	e004      	b.n	80015a6 <_ZN13TransceiverRF14set_crc_lengthEh+0x38>
        // CRCO bit in CONFIG resiger set 1
        case 2:
            new_config |= 1 << 2;
 800159c:	7bfb      	ldrb	r3, [r7, #15]
 800159e:	f043 0304 	orr.w	r3, r3, #4
 80015a2:	73fb      	strb	r3, [r7, #15]
            break;
 80015a4:	bf00      	nop
    }

    write_register(REG_CONFIG, new_config);
 80015a6:	7bfb      	ldrb	r3, [r7, #15]
 80015a8:	461a      	mov	r2, r3
 80015aa:	2100      	movs	r1, #0
 80015ac:	6878      	ldr	r0, [r7, #4]
 80015ae:	f7ff fe7d 	bl	80012ac <_ZN13TransceiverRF14write_registerEhh>
}
 80015b2:	bf00      	nop
 80015b4:	3710      	adds	r7, #16
 80015b6:	46bd      	mov	sp, r7
 80015b8:	bd80      	pop	{r7, pc}

080015ba <_ZN13TransceiverRF18set_address_widthsEh>:

// Sets the address width for the transceiver
void TransceiverRF::set_address_widths(widths bytes)
{
 80015ba:	b580      	push	{r7, lr}
 80015bc:	b082      	sub	sp, #8
 80015be:	af00      	add	r7, sp, #0
 80015c0:	6078      	str	r0, [r7, #4]
 80015c2:	460b      	mov	r3, r1
 80015c4:	70fb      	strb	r3, [r7, #3]
    write_register(REG_SETUP_AW, bytes - 2);
 80015c6:	78fb      	ldrb	r3, [r7, #3]
 80015c8:	3b02      	subs	r3, #2
 80015ca:	b2db      	uxtb	r3, r3
 80015cc:	461a      	mov	r2, r3
 80015ce:	2103      	movs	r1, #3
 80015d0:	6878      	ldr	r0, [r7, #4]
 80015d2:	f7ff fe6b 	bl	80012ac <_ZN13TransceiverRF14write_registerEhh>
}
 80015d6:	bf00      	nop
 80015d8:	3708      	adds	r7, #8
 80015da:	46bd      	mov	sp, r7
 80015dc:	bd80      	pop	{r7, pc}

080015de <_ZN13TransceiverRF21auto_retransmit_countEh>:

// Sets the auto retransmit count (number of retries)
void TransceiverRF::auto_retransmit_count(count cnt)
{
 80015de:	b580      	push	{r7, lr}
 80015e0:	b084      	sub	sp, #16
 80015e2:	af00      	add	r7, sp, #0
 80015e4:	6078      	str	r0, [r7, #4]
 80015e6:	460b      	mov	r3, r1
 80015e8:	70fb      	strb	r3, [r7, #3]
    uint8_t new_setup_retr = read_register(REG_SETUP_RETR);
 80015ea:	2104      	movs	r1, #4
 80015ec:	6878      	ldr	r0, [r7, #4]
 80015ee:	f7ff fe29 	bl	8001244 <_ZN13TransceiverRF13read_registerEh>
 80015f2:	4603      	mov	r3, r0
 80015f4:	73fb      	strb	r3, [r7, #15]
    
    // Reset ARC register 0
    new_setup_retr |= 0xF0;
 80015f6:	7bfb      	ldrb	r3, [r7, #15]
 80015f8:	f063 030f 	orn	r3, r3, #15
 80015fc:	73fb      	strb	r3, [r7, #15]
    new_setup_retr |= cnt;
 80015fe:	7bfa      	ldrb	r2, [r7, #15]
 8001600:	78fb      	ldrb	r3, [r7, #3]
 8001602:	4313      	orrs	r3, r2
 8001604:	73fb      	strb	r3, [r7, #15]
    write_register(REG_SETUP_RETR, new_setup_retr);
 8001606:	7bfb      	ldrb	r3, [r7, #15]
 8001608:	461a      	mov	r2, r3
 800160a:	2104      	movs	r1, #4
 800160c:	6878      	ldr	r0, [r7, #4]
 800160e:	f7ff fe4d 	bl	80012ac <_ZN13TransceiverRF14write_registerEhh>
}
 8001612:	bf00      	nop
 8001614:	3710      	adds	r7, #16
 8001616:	46bd      	mov	sp, r7
 8001618:	bd80      	pop	{r7, pc}
	...

0800161c <_ZN13TransceiverRF21auto_retransmit_delayEt>:

// Sets the auto retransmit delay (in microseconds)
void TransceiverRF::auto_retransmit_delay(delay us)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	b084      	sub	sp, #16
 8001620:	af00      	add	r7, sp, #0
 8001622:	6078      	str	r0, [r7, #4]
 8001624:	460b      	mov	r3, r1
 8001626:	807b      	strh	r3, [r7, #2]
    uint8_t new_setup_retr = read_register(REG_SETUP_RETR);
 8001628:	2104      	movs	r1, #4
 800162a:	6878      	ldr	r0, [r7, #4]
 800162c:	f7ff fe0a 	bl	8001244 <_ZN13TransceiverRF13read_registerEh>
 8001630:	4603      	mov	r3, r0
 8001632:	73fb      	strb	r3, [r7, #15]

    // Reset ARD register 0
    new_setup_retr |= 0x0F;
 8001634:	7bfb      	ldrb	r3, [r7, #15]
 8001636:	f043 030f 	orr.w	r3, r3, #15
 800163a:	73fb      	strb	r3, [r7, #15]
    new_setup_retr |= ((us / 250) - 1) << 4;
 800163c:	887b      	ldrh	r3, [r7, #2]
 800163e:	4a0c      	ldr	r2, [pc, #48]	@ (8001670 <_ZN13TransceiverRF21auto_retransmit_delayEt+0x54>)
 8001640:	fba2 2303 	umull	r2, r3, r2, r3
 8001644:	091b      	lsrs	r3, r3, #4
 8001646:	b29b      	uxth	r3, r3
 8001648:	3b01      	subs	r3, #1
 800164a:	b25b      	sxtb	r3, r3
 800164c:	011b      	lsls	r3, r3, #4
 800164e:	b25a      	sxtb	r2, r3
 8001650:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001654:	4313      	orrs	r3, r2
 8001656:	b25b      	sxtb	r3, r3
 8001658:	73fb      	strb	r3, [r7, #15]
    write_register(REG_SETUP_RETR, new_setup_retr);
 800165a:	7bfb      	ldrb	r3, [r7, #15]
 800165c:	461a      	mov	r2, r3
 800165e:	2104      	movs	r1, #4
 8001660:	6878      	ldr	r0, [r7, #4]
 8001662:	f7ff fe23 	bl	80012ac <_ZN13TransceiverRF14write_registerEhh>
}
 8001666:	bf00      	nop
 8001668:	3710      	adds	r7, #16
 800166a:	46bd      	mov	sp, r7
 800166c:	bd80      	pop	{r7, pc}
 800166e:	bf00      	nop
 8001670:	10624dd3 	.word	0x10624dd3

08001674 <_ZN13TransceiverRF8ptx_modeEv>:
    // LED TOGGLE
}

// Sets the device to PTX (primary TX) mode
void TransceiverRF::ptx_mode()
{
 8001674:	b580      	push	{r7, lr}
 8001676:	b084      	sub	sp, #16
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]
    uint8_t new_config = read_register(REG_CONFIG);
 800167c:	2100      	movs	r1, #0
 800167e:	6878      	ldr	r0, [r7, #4]
 8001680:	f7ff fde0 	bl	8001244 <_ZN13TransceiverRF13read_registerEh>
 8001684:	4603      	mov	r3, r0
 8001686:	73fb      	strb	r3, [r7, #15]
    new_config &= 0xFE;
 8001688:	7bfb      	ldrb	r3, [r7, #15]
 800168a:	f023 0301 	bic.w	r3, r3, #1
 800168e:	73fb      	strb	r3, [r7, #15]

    write_register(REG_CONFIG, new_config);
 8001690:	7bfb      	ldrb	r3, [r7, #15]
 8001692:	461a      	mov	r2, r3
 8001694:	2100      	movs	r1, #0
 8001696:	6878      	ldr	r0, [r7, #4]
 8001698:	f7ff fe08 	bl	80012ac <_ZN13TransceiverRF14write_registerEhh>
}
 800169c:	bf00      	nop
 800169e:	3710      	adds	r7, #16
 80016a0:	46bd      	mov	sp, r7
 80016a2:	bd80      	pop	{r7, pc}

080016a4 <_ZN13TransceiverRF7tx_initEt13air_data_rate>:

// Initializes the transceiver in TX mode with given channel and data rate
void TransceiverRF::tx_init(channel MHz, air_data_rate bps)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b082      	sub	sp, #8
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	6078      	str	r0, [r7, #4]
 80016ac:	460b      	mov	r3, r1
 80016ae:	807b      	strh	r3, [r7, #2]
 80016b0:	4613      	mov	r3, r2
 80016b2:	707b      	strb	r3, [r7, #1]
    reset();
 80016b4:	6878      	ldr	r0, [r7, #4]
 80016b6:	f7ff fe83 	bl	80013c0 <_ZN13TransceiverRF5resetEv>

    ptx_mode();
 80016ba:	6878      	ldr	r0, [r7, #4]
 80016bc:	f7ff ffda 	bl	8001674 <_ZN13TransceiverRF8ptx_modeEv>
    power_up();
 80016c0:	6878      	ldr	r0, [r7, #4]
 80016c2:	f7ff fe65 	bl	8001390 <_ZN13TransceiverRF8power_upEv>

    set_rf_channel(MHz);
 80016c6:	887b      	ldrh	r3, [r7, #2]
 80016c8:	4619      	mov	r1, r3
 80016ca:	6878      	ldr	r0, [r7, #4]
 80016cc:	f7ff feea 	bl	80014a4 <_ZN13TransceiverRF14set_rf_channelEt>
    set_rf_air_data_rate(bps);
 80016d0:	787b      	ldrb	r3, [r7, #1]
 80016d2:	4619      	mov	r1, r3
 80016d4:	6878      	ldr	r0, [r7, #4]
 80016d6:	f7ff fefa 	bl	80014ce <_ZN13TransceiverRF20set_rf_air_data_rateE13air_data_rate>
    set_rf_tx_output_power(output_power::_0dBm);
 80016da:	2103      	movs	r1, #3
 80016dc:	6878      	ldr	r0, [r7, #4]
 80016de:	f7ff ff25 	bl	800152c <_ZN13TransceiverRF22set_rf_tx_output_powerE12output_power>

    set_crc_length(1);
 80016e2:	2101      	movs	r1, #1
 80016e4:	6878      	ldr	r0, [r7, #4]
 80016e6:	f7ff ff42 	bl	800156e <_ZN13TransceiverRF14set_crc_lengthEh>
    set_address_widths(5);
 80016ea:	2105      	movs	r1, #5
 80016ec:	6878      	ldr	r0, [r7, #4]
 80016ee:	f7ff ff64 	bl	80015ba <_ZN13TransceiverRF18set_address_widthsEh>

    auto_retransmit_count(3);
 80016f2:	2103      	movs	r1, #3
 80016f4:	6878      	ldr	r0, [r7, #4]
 80016f6:	f7ff ff72 	bl	80015de <_ZN13TransceiverRF21auto_retransmit_countEh>
    auto_retransmit_delay(250);
 80016fa:	21fa      	movs	r1, #250	@ 0xfa
 80016fc:	6878      	ldr	r0, [r7, #4]
 80016fe:	f7ff ff8d 	bl	800161c <_ZN13TransceiverRF21auto_retransmit_delayEt>

    m_enable.set();
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	685b      	ldr	r3, [r3, #4]
 8001706:	4618      	mov	r0, r3
 8001708:	f7fe ff5c 	bl	80005c4 <_ZN4Gpio3setEv>
}
 800170c:	bf00      	nop
 800170e:	3708      	adds	r7, #8
 8001710:	46bd      	mov	sp, r7
 8001712:	bd80      	pop	{r7, pc}

08001714 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001714:	b480      	push	{r7}
 8001716:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001718:	bf00      	nop
 800171a:	e7fd      	b.n	8001718 <NMI_Handler+0x4>

0800171c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800171c:	b480      	push	{r7}
 800171e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001720:	bf00      	nop
 8001722:	e7fd      	b.n	8001720 <HardFault_Handler+0x4>

08001724 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001724:	b480      	push	{r7}
 8001726:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001728:	bf00      	nop
 800172a:	e7fd      	b.n	8001728 <MemManage_Handler+0x4>

0800172c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800172c:	b480      	push	{r7}
 800172e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001730:	bf00      	nop
 8001732:	e7fd      	b.n	8001730 <BusFault_Handler+0x4>

08001734 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001734:	b480      	push	{r7}
 8001736:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001738:	bf00      	nop
 800173a:	e7fd      	b.n	8001738 <UsageFault_Handler+0x4>

0800173c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800173c:	b480      	push	{r7}
 800173e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001740:	bf00      	nop
 8001742:	46bd      	mov	sp, r7
 8001744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001748:	4770      	bx	lr

0800174a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800174a:	b480      	push	{r7}
 800174c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800174e:	bf00      	nop
 8001750:	46bd      	mov	sp, r7
 8001752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001756:	4770      	bx	lr

08001758 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001758:	b480      	push	{r7}
 800175a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800175c:	bf00      	nop
 800175e:	46bd      	mov	sp, r7
 8001760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001764:	4770      	bx	lr
	...

08001768 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001768:	b480      	push	{r7}
 800176a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
  timer++;
 800176c:	4b05      	ldr	r3, [pc, #20]	@ (8001784 <SysTick_Handler+0x1c>)
 800176e:	881b      	ldrh	r3, [r3, #0]
 8001770:	b29b      	uxth	r3, r3
 8001772:	3301      	adds	r3, #1
 8001774:	b29a      	uxth	r2, r3
 8001776:	4b03      	ldr	r3, [pc, #12]	@ (8001784 <SysTick_Handler+0x1c>)
 8001778:	801a      	strh	r2, [r3, #0]
  /* USER CODE END SysTick_IRQn 0 */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800177a:	bf00      	nop
 800177c:	46bd      	mov	sp, r7
 800177e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001782:	4770      	bx	lr
 8001784:	20000020 	.word	0x20000020

08001788 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001788:	b480      	push	{r7}
 800178a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800178c:	4b06      	ldr	r3, [pc, #24]	@ (80017a8 <SystemInit+0x20>)
 800178e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001792:	4a05      	ldr	r2, [pc, #20]	@ (80017a8 <SystemInit+0x20>)
 8001794:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001798:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800179c:	bf00      	nop
 800179e:	46bd      	mov	sp, r7
 80017a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a4:	4770      	bx	lr
 80017a6:	bf00      	nop
 80017a8:	e000ed00 	.word	0xe000ed00

080017ac <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80017ac:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80017e4 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80017b0:	f7ff ffea 	bl	8001788 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80017b4:	480c      	ldr	r0, [pc, #48]	@ (80017e8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80017b6:	490d      	ldr	r1, [pc, #52]	@ (80017ec <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80017b8:	4a0d      	ldr	r2, [pc, #52]	@ (80017f0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80017ba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80017bc:	e002      	b.n	80017c4 <LoopCopyDataInit>

080017be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80017be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80017c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80017c2:	3304      	adds	r3, #4

080017c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80017c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80017c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80017c8:	d3f9      	bcc.n	80017be <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80017ca:	4a0a      	ldr	r2, [pc, #40]	@ (80017f4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80017cc:	4c0a      	ldr	r4, [pc, #40]	@ (80017f8 <LoopFillZerobss+0x22>)
  movs r3, #0
 80017ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80017d0:	e001      	b.n	80017d6 <LoopFillZerobss>

080017d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80017d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80017d4:	3204      	adds	r2, #4

080017d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80017d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80017d8:	d3fb      	bcc.n	80017d2 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80017da:	f001 f831 	bl	8002840 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80017de:	f7ff fb0d 	bl	8000dfc <main>
  bx  lr    
 80017e2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80017e4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80017e8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80017ec:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 80017f0:	080028c8 	.word	0x080028c8
  ldr r2, =_sbss
 80017f4:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 80017f8:	20000024 	.word	0x20000024

080017fc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80017fc:	e7fe      	b.n	80017fc <ADC_IRQHandler>
	...

08001800 <LL_EXTI_EnableIT_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 8001800:	b480      	push	{r7}
 8001802:	b083      	sub	sp, #12
 8001804:	af00      	add	r7, sp, #0
 8001806:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR, ExtiLine);
 8001808:	4b05      	ldr	r3, [pc, #20]	@ (8001820 <LL_EXTI_EnableIT_0_31+0x20>)
 800180a:	681a      	ldr	r2, [r3, #0]
 800180c:	4904      	ldr	r1, [pc, #16]	@ (8001820 <LL_EXTI_EnableIT_0_31+0x20>)
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	4313      	orrs	r3, r2
 8001812:	600b      	str	r3, [r1, #0]
}
 8001814:	bf00      	nop
 8001816:	370c      	adds	r7, #12
 8001818:	46bd      	mov	sp, r7
 800181a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181e:	4770      	bx	lr
 8001820:	40013c00 	.word	0x40013c00

08001824 <LL_EXTI_DisableIT_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_0_31(uint32_t ExtiLine)
{
 8001824:	b480      	push	{r7}
 8001826:	b083      	sub	sp, #12
 8001828:	af00      	add	r7, sp, #0
 800182a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR, ExtiLine);
 800182c:	4b06      	ldr	r3, [pc, #24]	@ (8001848 <LL_EXTI_DisableIT_0_31+0x24>)
 800182e:	681a      	ldr	r2, [r3, #0]
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	43db      	mvns	r3, r3
 8001834:	4904      	ldr	r1, [pc, #16]	@ (8001848 <LL_EXTI_DisableIT_0_31+0x24>)
 8001836:	4013      	ands	r3, r2
 8001838:	600b      	str	r3, [r1, #0]
}
 800183a:	bf00      	nop
 800183c:	370c      	adds	r7, #12
 800183e:	46bd      	mov	sp, r7
 8001840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001844:	4770      	bx	lr
 8001846:	bf00      	nop
 8001848:	40013c00 	.word	0x40013c00

0800184c <LL_EXTI_EnableEvent_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableEvent_0_31(uint32_t ExtiLine)
{
 800184c:	b480      	push	{r7}
 800184e:	b083      	sub	sp, #12
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR, ExtiLine);
 8001854:	4b05      	ldr	r3, [pc, #20]	@ (800186c <LL_EXTI_EnableEvent_0_31+0x20>)
 8001856:	685a      	ldr	r2, [r3, #4]
 8001858:	4904      	ldr	r1, [pc, #16]	@ (800186c <LL_EXTI_EnableEvent_0_31+0x20>)
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	4313      	orrs	r3, r2
 800185e:	604b      	str	r3, [r1, #4]

}
 8001860:	bf00      	nop
 8001862:	370c      	adds	r7, #12
 8001864:	46bd      	mov	sp, r7
 8001866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186a:	4770      	bx	lr
 800186c:	40013c00 	.word	0x40013c00

08001870 <LL_EXTI_DisableEvent_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableEvent_0_31(uint32_t ExtiLine)
{
 8001870:	b480      	push	{r7}
 8001872:	b083      	sub	sp, #12
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR, ExtiLine);
 8001878:	4b06      	ldr	r3, [pc, #24]	@ (8001894 <LL_EXTI_DisableEvent_0_31+0x24>)
 800187a:	685a      	ldr	r2, [r3, #4]
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	43db      	mvns	r3, r3
 8001880:	4904      	ldr	r1, [pc, #16]	@ (8001894 <LL_EXTI_DisableEvent_0_31+0x24>)
 8001882:	4013      	ands	r3, r2
 8001884:	604b      	str	r3, [r1, #4]
}
 8001886:	bf00      	nop
 8001888:	370c      	adds	r7, #12
 800188a:	46bd      	mov	sp, r7
 800188c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001890:	4770      	bx	lr
 8001892:	bf00      	nop
 8001894:	40013c00 	.word	0x40013c00

08001898 <LL_EXTI_EnableRisingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 8001898:	b480      	push	{r7}
 800189a:	b083      	sub	sp, #12
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR, ExtiLine);
 80018a0:	4b05      	ldr	r3, [pc, #20]	@ (80018b8 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 80018a2:	689a      	ldr	r2, [r3, #8]
 80018a4:	4904      	ldr	r1, [pc, #16]	@ (80018b8 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	4313      	orrs	r3, r2
 80018aa:	608b      	str	r3, [r1, #8]

}
 80018ac:	bf00      	nop
 80018ae:	370c      	adds	r7, #12
 80018b0:	46bd      	mov	sp, r7
 80018b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b6:	4770      	bx	lr
 80018b8:	40013c00 	.word	0x40013c00

080018bc <LL_EXTI_DisableRisingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_0_31(uint32_t ExtiLine)
{
 80018bc:	b480      	push	{r7}
 80018be:	b083      	sub	sp, #12
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR, ExtiLine);
 80018c4:	4b06      	ldr	r3, [pc, #24]	@ (80018e0 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 80018c6:	689a      	ldr	r2, [r3, #8]
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	43db      	mvns	r3, r3
 80018cc:	4904      	ldr	r1, [pc, #16]	@ (80018e0 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 80018ce:	4013      	ands	r3, r2
 80018d0:	608b      	str	r3, [r1, #8]

}
 80018d2:	bf00      	nop
 80018d4:	370c      	adds	r7, #12
 80018d6:	46bd      	mov	sp, r7
 80018d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018dc:	4770      	bx	lr
 80018de:	bf00      	nop
 80018e0:	40013c00 	.word	0x40013c00

080018e4 <LL_EXTI_EnableFallingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_0_31(uint32_t ExtiLine)
{
 80018e4:	b480      	push	{r7}
 80018e6:	b083      	sub	sp, #12
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR, ExtiLine);
 80018ec:	4b05      	ldr	r3, [pc, #20]	@ (8001904 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 80018ee:	68da      	ldr	r2, [r3, #12]
 80018f0:	4904      	ldr	r1, [pc, #16]	@ (8001904 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	4313      	orrs	r3, r2
 80018f6:	60cb      	str	r3, [r1, #12]
}
 80018f8:	bf00      	nop
 80018fa:	370c      	adds	r7, #12
 80018fc:	46bd      	mov	sp, r7
 80018fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001902:	4770      	bx	lr
 8001904:	40013c00 	.word	0x40013c00

08001908 <LL_EXTI_DisableFallingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_0_31(uint32_t ExtiLine)
{
 8001908:	b480      	push	{r7}
 800190a:	b083      	sub	sp, #12
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR, ExtiLine);
 8001910:	4b06      	ldr	r3, [pc, #24]	@ (800192c <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8001912:	68da      	ldr	r2, [r3, #12]
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	43db      	mvns	r3, r3
 8001918:	4904      	ldr	r1, [pc, #16]	@ (800192c <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 800191a:	4013      	ands	r3, r2
 800191c:	60cb      	str	r3, [r1, #12]
}
 800191e:	bf00      	nop
 8001920:	370c      	adds	r7, #12
 8001922:	46bd      	mov	sp, r7
 8001924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001928:	4770      	bx	lr
 800192a:	bf00      	nop
 800192c:	40013c00 	.word	0x40013c00

08001930 <LL_EXTI_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: EXTI registers are initialized
  *          - ERROR: not applicable
  */
uint32_t LL_EXTI_Init(LL_EXTI_InitTypeDef *EXTI_InitStruct)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	b084      	sub	sp, #16
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
  ErrorStatus status = SUCCESS;
 8001938:	2300      	movs	r3, #0
 800193a:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_EXTI_LINE_0_31(EXTI_InitStruct->Line_0_31));
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->LineCommand));
  assert_param(IS_LL_EXTI_MODE(EXTI_InitStruct->Mode));

  /* ENABLE LineCommand */
  if (EXTI_InitStruct->LineCommand != DISABLE)
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	791b      	ldrb	r3, [r3, #4]
 8001940:	2b00      	cmp	r3, #0
 8001942:	d065      	beq.n	8001a10 <LL_EXTI_Init+0xe0>
  {
    assert_param(IS_LL_EXTI_TRIGGER(EXTI_InitStruct->Trigger));

    /* Configure EXTI Lines in range from 0 to 31 */
    if (EXTI_InitStruct->Line_0_31 != LL_EXTI_LINE_NONE)
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	2b00      	cmp	r3, #0
 800194a:	d06b      	beq.n	8001a24 <LL_EXTI_Init+0xf4>
    {
      switch (EXTI_InitStruct->Mode)
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	795b      	ldrb	r3, [r3, #5]
 8001950:	2b02      	cmp	r3, #2
 8001952:	d01c      	beq.n	800198e <LL_EXTI_Init+0x5e>
 8001954:	2b02      	cmp	r3, #2
 8001956:	dc25      	bgt.n	80019a4 <LL_EXTI_Init+0x74>
 8001958:	2b00      	cmp	r3, #0
 800195a:	d002      	beq.n	8001962 <LL_EXTI_Init+0x32>
 800195c:	2b01      	cmp	r3, #1
 800195e:	d00b      	beq.n	8001978 <LL_EXTI_Init+0x48>
 8001960:	e020      	b.n	80019a4 <LL_EXTI_Init+0x74>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	4618      	mov	r0, r3
 8001968:	f7ff ff82 	bl	8001870 <LL_EXTI_DisableEvent_0_31>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	4618      	mov	r0, r3
 8001972:	f7ff ff45 	bl	8001800 <LL_EXTI_EnableIT_0_31>
          break;
 8001976:	e018      	b.n	80019aa <LL_EXTI_Init+0x7a>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	4618      	mov	r0, r3
 800197e:	f7ff ff51 	bl	8001824 <LL_EXTI_DisableIT_0_31>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	4618      	mov	r0, r3
 8001988:	f7ff ff60 	bl	800184c <LL_EXTI_EnableEvent_0_31>
          break;
 800198c:	e00d      	b.n	80019aa <LL_EXTI_Init+0x7a>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT & Event on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	4618      	mov	r0, r3
 8001994:	f7ff ff34 	bl	8001800 <LL_EXTI_EnableIT_0_31>
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	4618      	mov	r0, r3
 800199e:	f7ff ff55 	bl	800184c <LL_EXTI_EnableEvent_0_31>
          break;
 80019a2:	e002      	b.n	80019aa <LL_EXTI_Init+0x7a>
        default:
          status = ERROR;
 80019a4:	2301      	movs	r3, #1
 80019a6:	73fb      	strb	r3, [r7, #15]
          break;
 80019a8:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	799b      	ldrb	r3, [r3, #6]
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d038      	beq.n	8001a24 <LL_EXTI_Init+0xf4>
      {
        switch (EXTI_InitStruct->Trigger)
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	799b      	ldrb	r3, [r3, #6]
 80019b6:	2b03      	cmp	r3, #3
 80019b8:	d01c      	beq.n	80019f4 <LL_EXTI_Init+0xc4>
 80019ba:	2b03      	cmp	r3, #3
 80019bc:	dc25      	bgt.n	8001a0a <LL_EXTI_Init+0xda>
 80019be:	2b01      	cmp	r3, #1
 80019c0:	d002      	beq.n	80019c8 <LL_EXTI_Init+0x98>
 80019c2:	2b02      	cmp	r3, #2
 80019c4:	d00b      	beq.n	80019de <LL_EXTI_Init+0xae>
 80019c6:	e020      	b.n	8001a0a <LL_EXTI_Init+0xda>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	4618      	mov	r0, r3
 80019ce:	f7ff ff9b 	bl	8001908 <LL_EXTI_DisableFallingTrig_0_31>
            /* Then Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	4618      	mov	r0, r3
 80019d8:	f7ff ff5e 	bl	8001898 <LL_EXTI_EnableRisingTrig_0_31>
            break;
 80019dc:	e022      	b.n	8001a24 <LL_EXTI_Init+0xf4>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	4618      	mov	r0, r3
 80019e4:	f7ff ff6a 	bl	80018bc <LL_EXTI_DisableRisingTrig_0_31>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	4618      	mov	r0, r3
 80019ee:	f7ff ff79 	bl	80018e4 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 80019f2:	e017      	b.n	8001a24 <LL_EXTI_Init+0xf4>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	4618      	mov	r0, r3
 80019fa:	f7ff ff4d 	bl	8001898 <LL_EXTI_EnableRisingTrig_0_31>
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	4618      	mov	r0, r3
 8001a04:	f7ff ff6e 	bl	80018e4 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 8001a08:	e00c      	b.n	8001a24 <LL_EXTI_Init+0xf4>
          default:
            status = ERROR;
 8001a0a:	2301      	movs	r3, #1
 8001a0c:	73fb      	strb	r3, [r7, #15]
            break;
 8001a0e:	e009      	b.n	8001a24 <LL_EXTI_Init+0xf4>
  }
  /* DISABLE LineCommand */
  else
  {
    /* De-configure EXTI Lines in range from 0 to 31 */
    LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	4618      	mov	r0, r3
 8001a16:	f7ff ff05 	bl	8001824 <LL_EXTI_DisableIT_0_31>
    LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	4618      	mov	r0, r3
 8001a20:	f7ff ff26 	bl	8001870 <LL_EXTI_DisableEvent_0_31>
  }
  return status;
 8001a24:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a26:	4618      	mov	r0, r3
 8001a28:	3710      	adds	r7, #16
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	bd80      	pop	{r7, pc}

08001a2e <LL_GPIO_SetPinMode>:
{
 8001a2e:	b480      	push	{r7}
 8001a30:	b08b      	sub	sp, #44	@ 0x2c
 8001a32:	af00      	add	r7, sp, #0
 8001a34:	60f8      	str	r0, [r7, #12]
 8001a36:	60b9      	str	r1, [r7, #8]
 8001a38:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	681a      	ldr	r2, [r3, #0]
 8001a3e:	68bb      	ldr	r3, [r7, #8]
 8001a40:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a42:	697b      	ldr	r3, [r7, #20]
 8001a44:	fa93 f3a3 	rbit	r3, r3
 8001a48:	613b      	str	r3, [r7, #16]
  return result;
 8001a4a:	693b      	ldr	r3, [r7, #16]
 8001a4c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8001a4e:	69bb      	ldr	r3, [r7, #24]
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d101      	bne.n	8001a58 <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 8001a54:	2320      	movs	r3, #32
 8001a56:	e003      	b.n	8001a60 <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 8001a58:	69bb      	ldr	r3, [r7, #24]
 8001a5a:	fab3 f383 	clz	r3, r3
 8001a5e:	b2db      	uxtb	r3, r3
 8001a60:	005b      	lsls	r3, r3, #1
 8001a62:	2103      	movs	r1, #3
 8001a64:	fa01 f303 	lsl.w	r3, r1, r3
 8001a68:	43db      	mvns	r3, r3
 8001a6a:	401a      	ands	r2, r3
 8001a6c:	68bb      	ldr	r3, [r7, #8]
 8001a6e:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a70:	6a3b      	ldr	r3, [r7, #32]
 8001a72:	fa93 f3a3 	rbit	r3, r3
 8001a76:	61fb      	str	r3, [r7, #28]
  return result;
 8001a78:	69fb      	ldr	r3, [r7, #28]
 8001a7a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8001a7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d101      	bne.n	8001a86 <LL_GPIO_SetPinMode+0x58>
    return 32U;
 8001a82:	2320      	movs	r3, #32
 8001a84:	e003      	b.n	8001a8e <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 8001a86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a88:	fab3 f383 	clz	r3, r3
 8001a8c:	b2db      	uxtb	r3, r3
 8001a8e:	005b      	lsls	r3, r3, #1
 8001a90:	6879      	ldr	r1, [r7, #4]
 8001a92:	fa01 f303 	lsl.w	r3, r1, r3
 8001a96:	431a      	orrs	r2, r3
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	601a      	str	r2, [r3, #0]
}
 8001a9c:	bf00      	nop
 8001a9e:	372c      	adds	r7, #44	@ 0x2c
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa6:	4770      	bx	lr

08001aa8 <LL_GPIO_SetPinOutputType>:
{
 8001aa8:	b480      	push	{r7}
 8001aaa:	b085      	sub	sp, #20
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	60f8      	str	r0, [r7, #12]
 8001ab0:	60b9      	str	r1, [r7, #8]
 8001ab2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	685a      	ldr	r2, [r3, #4]
 8001ab8:	68bb      	ldr	r3, [r7, #8]
 8001aba:	43db      	mvns	r3, r3
 8001abc:	401a      	ands	r2, r3
 8001abe:	68bb      	ldr	r3, [r7, #8]
 8001ac0:	6879      	ldr	r1, [r7, #4]
 8001ac2:	fb01 f303 	mul.w	r3, r1, r3
 8001ac6:	431a      	orrs	r2, r3
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	605a      	str	r2, [r3, #4]
}
 8001acc:	bf00      	nop
 8001ace:	3714      	adds	r7, #20
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad6:	4770      	bx	lr

08001ad8 <LL_GPIO_SetPinSpeed>:
{
 8001ad8:	b480      	push	{r7}
 8001ada:	b08b      	sub	sp, #44	@ 0x2c
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	60f8      	str	r0, [r7, #12]
 8001ae0:	60b9      	str	r1, [r7, #8]
 8001ae2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	689a      	ldr	r2, [r3, #8]
 8001ae8:	68bb      	ldr	r3, [r7, #8]
 8001aea:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001aec:	697b      	ldr	r3, [r7, #20]
 8001aee:	fa93 f3a3 	rbit	r3, r3
 8001af2:	613b      	str	r3, [r7, #16]
  return result;
 8001af4:	693b      	ldr	r3, [r7, #16]
 8001af6:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8001af8:	69bb      	ldr	r3, [r7, #24]
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d101      	bne.n	8001b02 <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 8001afe:	2320      	movs	r3, #32
 8001b00:	e003      	b.n	8001b0a <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 8001b02:	69bb      	ldr	r3, [r7, #24]
 8001b04:	fab3 f383 	clz	r3, r3
 8001b08:	b2db      	uxtb	r3, r3
 8001b0a:	005b      	lsls	r3, r3, #1
 8001b0c:	2103      	movs	r1, #3
 8001b0e:	fa01 f303 	lsl.w	r3, r1, r3
 8001b12:	43db      	mvns	r3, r3
 8001b14:	401a      	ands	r2, r3
 8001b16:	68bb      	ldr	r3, [r7, #8]
 8001b18:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b1a:	6a3b      	ldr	r3, [r7, #32]
 8001b1c:	fa93 f3a3 	rbit	r3, r3
 8001b20:	61fb      	str	r3, [r7, #28]
  return result;
 8001b22:	69fb      	ldr	r3, [r7, #28]
 8001b24:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8001b26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d101      	bne.n	8001b30 <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 8001b2c:	2320      	movs	r3, #32
 8001b2e:	e003      	b.n	8001b38 <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 8001b30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b32:	fab3 f383 	clz	r3, r3
 8001b36:	b2db      	uxtb	r3, r3
 8001b38:	005b      	lsls	r3, r3, #1
 8001b3a:	6879      	ldr	r1, [r7, #4]
 8001b3c:	fa01 f303 	lsl.w	r3, r1, r3
 8001b40:	431a      	orrs	r2, r3
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	609a      	str	r2, [r3, #8]
}
 8001b46:	bf00      	nop
 8001b48:	372c      	adds	r7, #44	@ 0x2c
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b50:	4770      	bx	lr

08001b52 <LL_GPIO_SetPinPull>:
{
 8001b52:	b480      	push	{r7}
 8001b54:	b08b      	sub	sp, #44	@ 0x2c
 8001b56:	af00      	add	r7, sp, #0
 8001b58:	60f8      	str	r0, [r7, #12]
 8001b5a:	60b9      	str	r1, [r7, #8]
 8001b5c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	68da      	ldr	r2, [r3, #12]
 8001b62:	68bb      	ldr	r3, [r7, #8]
 8001b64:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b66:	697b      	ldr	r3, [r7, #20]
 8001b68:	fa93 f3a3 	rbit	r3, r3
 8001b6c:	613b      	str	r3, [r7, #16]
  return result;
 8001b6e:	693b      	ldr	r3, [r7, #16]
 8001b70:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8001b72:	69bb      	ldr	r3, [r7, #24]
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d101      	bne.n	8001b7c <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 8001b78:	2320      	movs	r3, #32
 8001b7a:	e003      	b.n	8001b84 <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 8001b7c:	69bb      	ldr	r3, [r7, #24]
 8001b7e:	fab3 f383 	clz	r3, r3
 8001b82:	b2db      	uxtb	r3, r3
 8001b84:	005b      	lsls	r3, r3, #1
 8001b86:	2103      	movs	r1, #3
 8001b88:	fa01 f303 	lsl.w	r3, r1, r3
 8001b8c:	43db      	mvns	r3, r3
 8001b8e:	401a      	ands	r2, r3
 8001b90:	68bb      	ldr	r3, [r7, #8]
 8001b92:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b94:	6a3b      	ldr	r3, [r7, #32]
 8001b96:	fa93 f3a3 	rbit	r3, r3
 8001b9a:	61fb      	str	r3, [r7, #28]
  return result;
 8001b9c:	69fb      	ldr	r3, [r7, #28]
 8001b9e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8001ba0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d101      	bne.n	8001baa <LL_GPIO_SetPinPull+0x58>
    return 32U;
 8001ba6:	2320      	movs	r3, #32
 8001ba8:	e003      	b.n	8001bb2 <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 8001baa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bac:	fab3 f383 	clz	r3, r3
 8001bb0:	b2db      	uxtb	r3, r3
 8001bb2:	005b      	lsls	r3, r3, #1
 8001bb4:	6879      	ldr	r1, [r7, #4]
 8001bb6:	fa01 f303 	lsl.w	r3, r1, r3
 8001bba:	431a      	orrs	r2, r3
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	60da      	str	r2, [r3, #12]
}
 8001bc0:	bf00      	nop
 8001bc2:	372c      	adds	r7, #44	@ 0x2c
 8001bc4:	46bd      	mov	sp, r7
 8001bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bca:	4770      	bx	lr

08001bcc <LL_GPIO_SetAFPin_0_7>:
{
 8001bcc:	b480      	push	{r7}
 8001bce:	b08b      	sub	sp, #44	@ 0x2c
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	60f8      	str	r0, [r7, #12]
 8001bd4:	60b9      	str	r1, [r7, #8]
 8001bd6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	6a1a      	ldr	r2, [r3, #32]
 8001bdc:	68bb      	ldr	r3, [r7, #8]
 8001bde:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001be0:	697b      	ldr	r3, [r7, #20]
 8001be2:	fa93 f3a3 	rbit	r3, r3
 8001be6:	613b      	str	r3, [r7, #16]
  return result;
 8001be8:	693b      	ldr	r3, [r7, #16]
 8001bea:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8001bec:	69bb      	ldr	r3, [r7, #24]
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d101      	bne.n	8001bf6 <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 8001bf2:	2320      	movs	r3, #32
 8001bf4:	e003      	b.n	8001bfe <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 8001bf6:	69bb      	ldr	r3, [r7, #24]
 8001bf8:	fab3 f383 	clz	r3, r3
 8001bfc:	b2db      	uxtb	r3, r3
 8001bfe:	009b      	lsls	r3, r3, #2
 8001c00:	210f      	movs	r1, #15
 8001c02:	fa01 f303 	lsl.w	r3, r1, r3
 8001c06:	43db      	mvns	r3, r3
 8001c08:	401a      	ands	r2, r3
 8001c0a:	68bb      	ldr	r3, [r7, #8]
 8001c0c:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c0e:	6a3b      	ldr	r3, [r7, #32]
 8001c10:	fa93 f3a3 	rbit	r3, r3
 8001c14:	61fb      	str	r3, [r7, #28]
  return result;
 8001c16:	69fb      	ldr	r3, [r7, #28]
 8001c18:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8001c1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d101      	bne.n	8001c24 <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 8001c20:	2320      	movs	r3, #32
 8001c22:	e003      	b.n	8001c2c <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 8001c24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c26:	fab3 f383 	clz	r3, r3
 8001c2a:	b2db      	uxtb	r3, r3
 8001c2c:	009b      	lsls	r3, r3, #2
 8001c2e:	6879      	ldr	r1, [r7, #4]
 8001c30:	fa01 f303 	lsl.w	r3, r1, r3
 8001c34:	431a      	orrs	r2, r3
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	621a      	str	r2, [r3, #32]
}
 8001c3a:	bf00      	nop
 8001c3c:	372c      	adds	r7, #44	@ 0x2c
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c44:	4770      	bx	lr

08001c46 <LL_GPIO_SetAFPin_8_15>:
{
 8001c46:	b480      	push	{r7}
 8001c48:	b08b      	sub	sp, #44	@ 0x2c
 8001c4a:	af00      	add	r7, sp, #0
 8001c4c:	60f8      	str	r0, [r7, #12]
 8001c4e:	60b9      	str	r1, [r7, #8]
 8001c50:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001c56:	68bb      	ldr	r3, [r7, #8]
 8001c58:	0a1b      	lsrs	r3, r3, #8
 8001c5a:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c5c:	697b      	ldr	r3, [r7, #20]
 8001c5e:	fa93 f3a3 	rbit	r3, r3
 8001c62:	613b      	str	r3, [r7, #16]
  return result;
 8001c64:	693b      	ldr	r3, [r7, #16]
 8001c66:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8001c68:	69bb      	ldr	r3, [r7, #24]
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d101      	bne.n	8001c72 <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 8001c6e:	2320      	movs	r3, #32
 8001c70:	e003      	b.n	8001c7a <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 8001c72:	69bb      	ldr	r3, [r7, #24]
 8001c74:	fab3 f383 	clz	r3, r3
 8001c78:	b2db      	uxtb	r3, r3
 8001c7a:	009b      	lsls	r3, r3, #2
 8001c7c:	210f      	movs	r1, #15
 8001c7e:	fa01 f303 	lsl.w	r3, r1, r3
 8001c82:	43db      	mvns	r3, r3
 8001c84:	401a      	ands	r2, r3
 8001c86:	68bb      	ldr	r3, [r7, #8]
 8001c88:	0a1b      	lsrs	r3, r3, #8
 8001c8a:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c8c:	6a3b      	ldr	r3, [r7, #32]
 8001c8e:	fa93 f3a3 	rbit	r3, r3
 8001c92:	61fb      	str	r3, [r7, #28]
  return result;
 8001c94:	69fb      	ldr	r3, [r7, #28]
 8001c96:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8001c98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d101      	bne.n	8001ca2 <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 8001c9e:	2320      	movs	r3, #32
 8001ca0:	e003      	b.n	8001caa <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 8001ca2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ca4:	fab3 f383 	clz	r3, r3
 8001ca8:	b2db      	uxtb	r3, r3
 8001caa:	009b      	lsls	r3, r3, #2
 8001cac:	6879      	ldr	r1, [r7, #4]
 8001cae:	fa01 f303 	lsl.w	r3, r1, r3
 8001cb2:	431a      	orrs	r2, r3
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8001cb8:	bf00      	nop
 8001cba:	372c      	adds	r7, #44	@ 0x2c
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc2:	4770      	bx	lr

08001cc4 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	b08a      	sub	sp, #40	@ 0x28
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	6078      	str	r0, [r7, #4]
 8001ccc:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
 8001cce:	2300      	movs	r3, #0
 8001cd0:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t currentpin = 0x00000000U;
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	623b      	str	r3, [r7, #32]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8001cd6:	683b      	ldr	r3, [r7, #0]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	61bb      	str	r3, [r7, #24]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cdc:	69bb      	ldr	r3, [r7, #24]
 8001cde:	fa93 f3a3 	rbit	r3, r3
 8001ce2:	617b      	str	r3, [r7, #20]
  return result;
 8001ce4:	697b      	ldr	r3, [r7, #20]
 8001ce6:	61fb      	str	r3, [r7, #28]
  if (value == 0U)
 8001ce8:	69fb      	ldr	r3, [r7, #28]
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d101      	bne.n	8001cf2 <LL_GPIO_Init+0x2e>
    return 32U;
 8001cee:	2320      	movs	r3, #32
 8001cf0:	e003      	b.n	8001cfa <LL_GPIO_Init+0x36>
  return __builtin_clz(value);
 8001cf2:	69fb      	ldr	r3, [r7, #28]
 8001cf4:	fab3 f383 	clz	r3, r3
 8001cf8:	b2db      	uxtb	r3, r3
 8001cfa:	627b      	str	r3, [r7, #36]	@ 0x24
  
  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8001cfc:	e057      	b.n	8001dae <LL_GPIO_Init+0xea>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 8001cfe:	683b      	ldr	r3, [r7, #0]
 8001d00:	681a      	ldr	r2, [r3, #0]
 8001d02:	2101      	movs	r1, #1
 8001d04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d06:	fa01 f303 	lsl.w	r3, r1, r3
 8001d0a:	4013      	ands	r3, r2
 8001d0c:	623b      	str	r3, [r7, #32]
    
    if (currentpin)
 8001d0e:	6a3b      	ldr	r3, [r7, #32]
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d049      	beq.n	8001da8 <LL_GPIO_Init+0xe4>
    {
      
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8001d14:	683b      	ldr	r3, [r7, #0]
 8001d16:	685b      	ldr	r3, [r3, #4]
 8001d18:	2b01      	cmp	r3, #1
 8001d1a:	d003      	beq.n	8001d24 <LL_GPIO_Init+0x60>
 8001d1c:	683b      	ldr	r3, [r7, #0]
 8001d1e:	685b      	ldr	r3, [r3, #4]
 8001d20:	2b02      	cmp	r3, #2
 8001d22:	d10d      	bne.n	8001d40 <LL_GPIO_Init+0x7c>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
        
        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8001d24:	683b      	ldr	r3, [r7, #0]
 8001d26:	689b      	ldr	r3, [r3, #8]
 8001d28:	461a      	mov	r2, r3
 8001d2a:	6a39      	ldr	r1, [r7, #32]
 8001d2c:	6878      	ldr	r0, [r7, #4]
 8001d2e:	f7ff fed3 	bl	8001ad8 <LL_GPIO_SetPinSpeed>
        
        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));
        
        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 8001d32:	683b      	ldr	r3, [r7, #0]
 8001d34:	68db      	ldr	r3, [r3, #12]
 8001d36:	461a      	mov	r2, r3
 8001d38:	6a39      	ldr	r1, [r7, #32]
 8001d3a:	6878      	ldr	r0, [r7, #4]
 8001d3c:	f7ff feb4 	bl	8001aa8 <LL_GPIO_SetPinOutputType>
      }
      
      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8001d40:	683b      	ldr	r3, [r7, #0]
 8001d42:	691b      	ldr	r3, [r3, #16]
 8001d44:	461a      	mov	r2, r3
 8001d46:	6a39      	ldr	r1, [r7, #32]
 8001d48:	6878      	ldr	r0, [r7, #4]
 8001d4a:	f7ff ff02 	bl	8001b52 <LL_GPIO_SetPinPull>
      
      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8001d4e:	683b      	ldr	r3, [r7, #0]
 8001d50:	685b      	ldr	r3, [r3, #4]
 8001d52:	2b02      	cmp	r3, #2
 8001d54:	d121      	bne.n	8001d9a <LL_GPIO_Init+0xd6>
 8001d56:	6a3b      	ldr	r3, [r7, #32]
 8001d58:	60fb      	str	r3, [r7, #12]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	fa93 f3a3 	rbit	r3, r3
 8001d60:	60bb      	str	r3, [r7, #8]
  return result;
 8001d62:	68bb      	ldr	r3, [r7, #8]
 8001d64:	613b      	str	r3, [r7, #16]
  if (value == 0U)
 8001d66:	693b      	ldr	r3, [r7, #16]
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d101      	bne.n	8001d70 <LL_GPIO_Init+0xac>
    return 32U;
 8001d6c:	2320      	movs	r3, #32
 8001d6e:	e003      	b.n	8001d78 <LL_GPIO_Init+0xb4>
  return __builtin_clz(value);
 8001d70:	693b      	ldr	r3, [r7, #16]
 8001d72:	fab3 f383 	clz	r3, r3
 8001d76:	b2db      	uxtb	r3, r3
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));
        
        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 8001d78:	2b07      	cmp	r3, #7
 8001d7a:	d807      	bhi.n	8001d8c <LL_GPIO_Init+0xc8>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8001d7c:	683b      	ldr	r3, [r7, #0]
 8001d7e:	695b      	ldr	r3, [r3, #20]
 8001d80:	461a      	mov	r2, r3
 8001d82:	6a39      	ldr	r1, [r7, #32]
 8001d84:	6878      	ldr	r0, [r7, #4]
 8001d86:	f7ff ff21 	bl	8001bcc <LL_GPIO_SetAFPin_0_7>
 8001d8a:	e006      	b.n	8001d9a <LL_GPIO_Init+0xd6>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8001d8c:	683b      	ldr	r3, [r7, #0]
 8001d8e:	695b      	ldr	r3, [r3, #20]
 8001d90:	461a      	mov	r2, r3
 8001d92:	6a39      	ldr	r1, [r7, #32]
 8001d94:	6878      	ldr	r0, [r7, #4]
 8001d96:	f7ff ff56 	bl	8001c46 <LL_GPIO_SetAFPin_8_15>
        }
      }
      
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8001d9a:	683b      	ldr	r3, [r7, #0]
 8001d9c:	685b      	ldr	r3, [r3, #4]
 8001d9e:	461a      	mov	r2, r3
 8001da0:	6a39      	ldr	r1, [r7, #32]
 8001da2:	6878      	ldr	r0, [r7, #4]
 8001da4:	f7ff fe43 	bl	8001a2e <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8001da8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001daa:	3301      	adds	r3, #1
 8001dac:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8001dae:	683b      	ldr	r3, [r7, #0]
 8001db0:	681a      	ldr	r2, [r3, #0]
 8001db2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001db4:	fa22 f303 	lsr.w	r3, r2, r3
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d1a0      	bne.n	8001cfe <LL_GPIO_Init+0x3a>
  }

  return (SUCCESS);
 8001dbc:	2300      	movs	r3, #0
}
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	3728      	adds	r7, #40	@ 0x28
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	bd80      	pop	{r7, pc}
	...

08001dc8 <LL_RCC_GetSysClkSource>:
{
 8001dc8:	b480      	push	{r7}
 8001dca:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8001dcc:	4b04      	ldr	r3, [pc, #16]	@ (8001de0 <LL_RCC_GetSysClkSource+0x18>)
 8001dce:	689b      	ldr	r3, [r3, #8]
 8001dd0:	f003 030c 	and.w	r3, r3, #12
}
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ddc:	4770      	bx	lr
 8001dde:	bf00      	nop
 8001de0:	40023800 	.word	0x40023800

08001de4 <LL_RCC_GetAHBPrescaler>:
{
 8001de4:	b480      	push	{r7}
 8001de6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8001de8:	4b04      	ldr	r3, [pc, #16]	@ (8001dfc <LL_RCC_GetAHBPrescaler+0x18>)
 8001dea:	689b      	ldr	r3, [r3, #8]
 8001dec:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8001df0:	4618      	mov	r0, r3
 8001df2:	46bd      	mov	sp, r7
 8001df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df8:	4770      	bx	lr
 8001dfa:	bf00      	nop
 8001dfc:	40023800 	.word	0x40023800

08001e00 <LL_RCC_GetAPB1Prescaler>:
{
 8001e00:	b480      	push	{r7}
 8001e02:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8001e04:	4b04      	ldr	r3, [pc, #16]	@ (8001e18 <LL_RCC_GetAPB1Prescaler+0x18>)
 8001e06:	689b      	ldr	r3, [r3, #8]
 8001e08:	f403 53e0 	and.w	r3, r3, #7168	@ 0x1c00
}
 8001e0c:	4618      	mov	r0, r3
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e14:	4770      	bx	lr
 8001e16:	bf00      	nop
 8001e18:	40023800 	.word	0x40023800

08001e1c <LL_RCC_GetAPB2Prescaler>:
{
 8001e1c:	b480      	push	{r7}
 8001e1e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8001e20:	4b04      	ldr	r3, [pc, #16]	@ (8001e34 <LL_RCC_GetAPB2Prescaler+0x18>)
 8001e22:	689b      	ldr	r3, [r3, #8]
 8001e24:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 8001e28:	4618      	mov	r0, r3
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e30:	4770      	bx	lr
 8001e32:	bf00      	nop
 8001e34:	40023800 	.word	0x40023800

08001e38 <LL_RCC_PLL_GetMainSource>:
  * @retval Returned value can be one of the following values:
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8001e38:	b480      	push	{r7}
 8001e3a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8001e3c:	4b04      	ldr	r3, [pc, #16]	@ (8001e50 <LL_RCC_PLL_GetMainSource+0x18>)
 8001e3e:	685b      	ldr	r3, [r3, #4]
 8001e40:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
}
 8001e44:	4618      	mov	r0, r3
 8001e46:	46bd      	mov	sp, r7
 8001e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4c:	4770      	bx	lr
 8001e4e:	bf00      	nop
 8001e50:	40023800 	.word	0x40023800

08001e54 <LL_RCC_PLL_GetN>:
  * @retval Between 50/192(*) and 432
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8001e54:	b480      	push	{r7}
 8001e56:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8001e58:	4b04      	ldr	r3, [pc, #16]	@ (8001e6c <LL_RCC_PLL_GetN+0x18>)
 8001e5a:	685b      	ldr	r3, [r3, #4]
 8001e5c:	099b      	lsrs	r3, r3, #6
 8001e5e:	f3c3 0308 	ubfx	r3, r3, #0, #9
}
 8001e62:	4618      	mov	r0, r3
 8001e64:	46bd      	mov	sp, r7
 8001e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6a:	4770      	bx	lr
 8001e6c:	40023800 	.word	0x40023800

08001e70 <LL_RCC_PLL_GetP>:
  *         @arg @ref LL_RCC_PLLP_DIV_4
  *         @arg @ref LL_RCC_PLLP_DIV_6
  *         @arg @ref LL_RCC_PLLP_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetP(void)
{
 8001e70:	b480      	push	{r7}
 8001e72:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP));
 8001e74:	4b04      	ldr	r3, [pc, #16]	@ (8001e88 <LL_RCC_PLL_GetP+0x18>)
 8001e76:	685b      	ldr	r3, [r3, #4]
 8001e78:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
}
 8001e7c:	4618      	mov	r0, r3
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e84:	4770      	bx	lr
 8001e86:	bf00      	nop
 8001e88:	40023800 	.word	0x40023800

08001e8c <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_5
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8001e8c:	b480      	push	{r7}
 8001e8e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8001e90:	4b04      	ldr	r3, [pc, #16]	@ (8001ea4 <LL_RCC_PLL_GetR+0x18>)
 8001e92:	685b      	ldr	r3, [r3, #4]
 8001e94:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
}
 8001e98:	4618      	mov	r0, r3
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea0:	4770      	bx	lr
 8001ea2:	bf00      	nop
 8001ea4:	40023800 	.word	0x40023800

08001ea8 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_61
  *         @arg @ref LL_RCC_PLLM_DIV_62
  *         @arg @ref LL_RCC_PLLM_DIV_63
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8001ea8:	b480      	push	{r7}
 8001eaa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8001eac:	4b04      	ldr	r3, [pc, #16]	@ (8001ec0 <LL_RCC_PLL_GetDivider+0x18>)
 8001eae:	685b      	ldr	r3, [r3, #4]
 8001eb0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
}
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ebc:	4770      	bx	lr
 8001ebe:	bf00      	nop
 8001ec0:	40023800 	.word	0x40023800

08001ec4 <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	b082      	sub	sp, #8
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 8001ecc:	f000 f820 	bl	8001f10 <RCC_GetSystemClockFreq>
 8001ed0:	4602      	mov	r2, r0
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	4618      	mov	r0, r3
 8001edc:	f000 f85c 	bl	8001f98 <RCC_GetHCLKClockFreq>
 8001ee0:	4602      	mov	r2, r0
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	685b      	ldr	r3, [r3, #4]
 8001eea:	4618      	mov	r0, r3
 8001eec:	f000 f86a 	bl	8001fc4 <RCC_GetPCLK1ClockFreq>
 8001ef0:	4602      	mov	r2, r0
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	609a      	str	r2, [r3, #8]

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	685b      	ldr	r3, [r3, #4]
 8001efa:	4618      	mov	r0, r3
 8001efc:	f000 f876 	bl	8001fec <RCC_GetPCLK2ClockFreq>
 8001f00:	4602      	mov	r2, r0
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	60da      	str	r2, [r3, #12]
}
 8001f06:	bf00      	nop
 8001f08:	3708      	adds	r7, #8
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	bd80      	pop	{r7, pc}
	...

08001f10 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	b082      	sub	sp, #8
 8001f14:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 8001f16:	2300      	movs	r3, #0
 8001f18:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 8001f1a:	f7ff ff55 	bl	8001dc8 <LL_RCC_GetSysClkSource>
 8001f1e:	4603      	mov	r3, r0
 8001f20:	2b0c      	cmp	r3, #12
 8001f22:	d82d      	bhi.n	8001f80 <RCC_GetSystemClockFreq+0x70>
 8001f24:	a201      	add	r2, pc, #4	@ (adr r2, 8001f2c <RCC_GetSystemClockFreq+0x1c>)
 8001f26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f2a:	bf00      	nop
 8001f2c:	08001f61 	.word	0x08001f61
 8001f30:	08001f81 	.word	0x08001f81
 8001f34:	08001f81 	.word	0x08001f81
 8001f38:	08001f81 	.word	0x08001f81
 8001f3c:	08001f67 	.word	0x08001f67
 8001f40:	08001f81 	.word	0x08001f81
 8001f44:	08001f81 	.word	0x08001f81
 8001f48:	08001f81 	.word	0x08001f81
 8001f4c:	08001f6d 	.word	0x08001f6d
 8001f50:	08001f81 	.word	0x08001f81
 8001f54:	08001f81 	.word	0x08001f81
 8001f58:	08001f81 	.word	0x08001f81
 8001f5c:	08001f77 	.word	0x08001f77
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 8001f60:	4b0b      	ldr	r3, [pc, #44]	@ (8001f90 <RCC_GetSystemClockFreq+0x80>)
 8001f62:	607b      	str	r3, [r7, #4]
      break;
 8001f64:	e00f      	b.n	8001f86 <RCC_GetSystemClockFreq+0x76>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 8001f66:	4b0b      	ldr	r3, [pc, #44]	@ (8001f94 <RCC_GetSystemClockFreq+0x84>)
 8001f68:	607b      	str	r3, [r7, #4]
      break;
 8001f6a:	e00c      	b.n	8001f86 <RCC_GetSystemClockFreq+0x76>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLL);
 8001f6c:	2008      	movs	r0, #8
 8001f6e:	f000 f851 	bl	8002014 <RCC_PLL_GetFreqDomain_SYS>
 8001f72:	6078      	str	r0, [r7, #4]
      break;
 8001f74:	e007      	b.n	8001f86 <RCC_GetSystemClockFreq+0x76>

#if defined(RCC_PLLR_SYSCLK_SUPPORT)
    case LL_RCC_SYS_CLKSOURCE_STATUS_PLLR: /* PLLR used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLLR);
 8001f76:	200c      	movs	r0, #12
 8001f78:	f000 f84c 	bl	8002014 <RCC_PLL_GetFreqDomain_SYS>
 8001f7c:	6078      	str	r0, [r7, #4]
      break;
 8001f7e:	e002      	b.n	8001f86 <RCC_GetSystemClockFreq+0x76>
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

    default:
      frequency = HSI_VALUE;
 8001f80:	4b03      	ldr	r3, [pc, #12]	@ (8001f90 <RCC_GetSystemClockFreq+0x80>)
 8001f82:	607b      	str	r3, [r7, #4]
      break;
 8001f84:	bf00      	nop
  }

  return frequency;
 8001f86:	687b      	ldr	r3, [r7, #4]
}
 8001f88:	4618      	mov	r0, r3
 8001f8a:	3708      	adds	r7, #8
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	bd80      	pop	{r7, pc}
 8001f90:	00f42400 	.word	0x00f42400
 8001f94:	007a1200 	.word	0x007a1200

08001f98 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	b082      	sub	sp, #8
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8001fa0:	f7ff ff20 	bl	8001de4 <LL_RCC_GetAHBPrescaler>
 8001fa4:	4603      	mov	r3, r0
 8001fa6:	091b      	lsrs	r3, r3, #4
 8001fa8:	f003 030f 	and.w	r3, r3, #15
 8001fac:	4a04      	ldr	r2, [pc, #16]	@ (8001fc0 <RCC_GetHCLKClockFreq+0x28>)
 8001fae:	5cd3      	ldrb	r3, [r2, r3]
 8001fb0:	461a      	mov	r2, r3
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	40d3      	lsrs	r3, r2
}
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	3708      	adds	r7, #8
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	bd80      	pop	{r7, pc}
 8001fbe:	bf00      	nop
 8001fc0:	080028a0 	.word	0x080028a0

08001fc4 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	b082      	sub	sp, #8
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8001fcc:	f7ff ff18 	bl	8001e00 <LL_RCC_GetAPB1Prescaler>
 8001fd0:	4603      	mov	r3, r0
 8001fd2:	0a9b      	lsrs	r3, r3, #10
 8001fd4:	4a04      	ldr	r2, [pc, #16]	@ (8001fe8 <RCC_GetPCLK1ClockFreq+0x24>)
 8001fd6:	5cd3      	ldrb	r3, [r2, r3]
 8001fd8:	461a      	mov	r2, r3
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	40d3      	lsrs	r3, r2
}
 8001fde:	4618      	mov	r0, r3
 8001fe0:	3708      	adds	r7, #8
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	bd80      	pop	{r7, pc}
 8001fe6:	bf00      	nop
 8001fe8:	080028b0 	.word	0x080028b0

08001fec <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	b082      	sub	sp, #8
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 8001ff4:	f7ff ff12 	bl	8001e1c <LL_RCC_GetAPB2Prescaler>
 8001ff8:	4603      	mov	r3, r0
 8001ffa:	0b5b      	lsrs	r3, r3, #13
 8001ffc:	4a04      	ldr	r2, [pc, #16]	@ (8002010 <RCC_GetPCLK2ClockFreq+0x24>)
 8001ffe:	5cd3      	ldrb	r3, [r2, r3]
 8002000:	461a      	mov	r2, r3
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	40d3      	lsrs	r3, r2
}
 8002006:	4618      	mov	r0, r3
 8002008:	3708      	adds	r7, #8
 800200a:	46bd      	mov	sp, r7
 800200c:	bd80      	pop	{r7, pc}
 800200e:	bf00      	nop
 8002010:	080028b0 	.word	0x080028b0

08002014 <RCC_PLL_GetFreqDomain_SYS>:
  * @brief  Return PLL clock frequency used for system domain
  * @param  SYSCLK_Source System clock source
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(uint32_t SYSCLK_Source)
{
 8002014:	b590      	push	{r4, r7, lr}
 8002016:	b087      	sub	sp, #28
 8002018:	af00      	add	r7, sp, #0
 800201a:	6078      	str	r0, [r7, #4]
  uint32_t pllinputfreq = 0U;
 800201c:	2300      	movs	r3, #0
 800201e:	617b      	str	r3, [r7, #20]
  uint32_t pllsource = 0U;
 8002020:	2300      	movs	r3, #0
 8002022:	60fb      	str	r3, [r7, #12]
  uint32_t plloutputfreq = 0U;
 8002024:	2300      	movs	r3, #0
 8002026:	613b      	str	r3, [r7, #16]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
     SYSCLK = PLL_VCO / (PLLP or PLLR)
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 8002028:	f7ff ff06 	bl	8001e38 <LL_RCC_PLL_GetMainSource>
 800202c:	60f8      	str	r0, [r7, #12]

  switch (pllsource)
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	2b00      	cmp	r3, #0
 8002032:	d004      	beq.n	800203e <RCC_PLL_GetFreqDomain_SYS+0x2a>
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800203a:	d003      	beq.n	8002044 <RCC_PLL_GetFreqDomain_SYS+0x30>
 800203c:	e005      	b.n	800204a <RCC_PLL_GetFreqDomain_SYS+0x36>
  {
    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 800203e:	4b1c      	ldr	r3, [pc, #112]	@ (80020b0 <RCC_PLL_GetFreqDomain_SYS+0x9c>)
 8002040:	617b      	str	r3, [r7, #20]
      break;
 8002042:	e005      	b.n	8002050 <RCC_PLL_GetFreqDomain_SYS+0x3c>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 8002044:	4b1b      	ldr	r3, [pc, #108]	@ (80020b4 <RCC_PLL_GetFreqDomain_SYS+0xa0>)
 8002046:	617b      	str	r3, [r7, #20]
      break;
 8002048:	e002      	b.n	8002050 <RCC_PLL_GetFreqDomain_SYS+0x3c>

    default:
      pllinputfreq = HSI_VALUE;
 800204a:	4b19      	ldr	r3, [pc, #100]	@ (80020b0 <RCC_PLL_GetFreqDomain_SYS+0x9c>)
 800204c:	617b      	str	r3, [r7, #20]
      break;
 800204e:	bf00      	nop
  }

  if (SYSCLK_Source == LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	2b08      	cmp	r3, #8
 8002054:	d114      	bne.n	8002080 <RCC_PLL_GetFreqDomain_SYS+0x6c>
  {
    plloutputfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8002056:	f7ff ff27 	bl	8001ea8 <LL_RCC_PLL_GetDivider>
 800205a:	4602      	mov	r2, r0
 800205c:	697b      	ldr	r3, [r7, #20]
 800205e:	fbb3 f4f2 	udiv	r4, r3, r2
 8002062:	f7ff fef7 	bl	8001e54 <LL_RCC_PLL_GetN>
 8002066:	4603      	mov	r3, r0
 8002068:	fb03 f404 	mul.w	r4, r3, r4
 800206c:	f7ff ff00 	bl	8001e70 <LL_RCC_PLL_GetP>
 8002070:	4603      	mov	r3, r0
 8002072:	0c1b      	lsrs	r3, r3, #16
 8002074:	3301      	adds	r3, #1
 8002076:	005b      	lsls	r3, r3, #1
 8002078:	fbb4 f3f3 	udiv	r3, r4, r3
 800207c:	613b      	str	r3, [r7, #16]
 800207e:	e011      	b.n	80020a4 <RCC_PLL_GetFreqDomain_SYS+0x90>
                                              LL_RCC_PLL_GetN(), LL_RCC_PLL_GetP());
  }
#if defined(RCC_PLLR_SYSCLK_SUPPORT)
  else
  {
    plloutputfreq = __LL_RCC_CALC_PLLRCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8002080:	f7ff ff12 	bl	8001ea8 <LL_RCC_PLL_GetDivider>
 8002084:	4602      	mov	r2, r0
 8002086:	697b      	ldr	r3, [r7, #20]
 8002088:	fbb3 f4f2 	udiv	r4, r3, r2
 800208c:	f7ff fee2 	bl	8001e54 <LL_RCC_PLL_GetN>
 8002090:	4603      	mov	r3, r0
 8002092:	fb03 f404 	mul.w	r4, r3, r4
 8002096:	f7ff fef9 	bl	8001e8c <LL_RCC_PLL_GetR>
 800209a:	4603      	mov	r3, r0
 800209c:	0f1b      	lsrs	r3, r3, #28
 800209e:	fbb4 f3f3 	udiv	r3, r4, r3
 80020a2:	613b      	str	r3, [r7, #16]
                                               LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

  return plloutputfreq;
 80020a4:	693b      	ldr	r3, [r7, #16]
}
 80020a6:	4618      	mov	r0, r3
 80020a8:	371c      	adds	r7, #28
 80020aa:	46bd      	mov	sp, r7
 80020ac:	bd90      	pop	{r4, r7, pc}
 80020ae:	bf00      	nop
 80020b0:	00f42400 	.word	0x00f42400
 80020b4:	007a1200 	.word	0x007a1200

080020b8 <LL_SPI_IsEnabled>:
{
 80020b8:	b480      	push	{r7}
 80020ba:	b083      	sub	sp, #12
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->CR1, SPI_CR1_SPE) == (SPI_CR1_SPE)) ? 1UL : 0UL);
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80020c8:	2b40      	cmp	r3, #64	@ 0x40
 80020ca:	d101      	bne.n	80020d0 <LL_SPI_IsEnabled+0x18>
 80020cc:	2301      	movs	r3, #1
 80020ce:	e000      	b.n	80020d2 <LL_SPI_IsEnabled+0x1a>
 80020d0:	2300      	movs	r3, #0
}
 80020d2:	4618      	mov	r0, r3
 80020d4:	370c      	adds	r7, #12
 80020d6:	46bd      	mov	sp, r7
 80020d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020dc:	4770      	bx	lr

080020de <LL_SPI_SetCRCPolynomial>:
{
 80020de:	b480      	push	{r7}
 80020e0:	b083      	sub	sp, #12
 80020e2:	af00      	add	r7, sp, #0
 80020e4:	6078      	str	r0, [r7, #4]
 80020e6:	6039      	str	r1, [r7, #0]
  WRITE_REG(SPIx->CRCPR, (uint16_t)CRCPoly);
 80020e8:	683b      	ldr	r3, [r7, #0]
 80020ea:	b29b      	uxth	r3, r3
 80020ec:	461a      	mov	r2, r3
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	611a      	str	r2, [r3, #16]
}
 80020f2:	bf00      	nop
 80020f4:	370c      	adds	r7, #12
 80020f6:	46bd      	mov	sp, r7
 80020f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fc:	4770      	bx	lr

080020fe <LL_SPI_Init>:
  * @param  SPIx SPI Instance
  * @param  SPI_InitStruct pointer to a @ref LL_SPI_InitTypeDef structure
  * @retval An ErrorStatus enumeration value. (Return always SUCCESS)
  */
ErrorStatus LL_SPI_Init(SPI_TypeDef *SPIx, LL_SPI_InitTypeDef *SPI_InitStruct)
{
 80020fe:	b580      	push	{r7, lr}
 8002100:	b084      	sub	sp, #16
 8002102:	af00      	add	r7, sp, #0
 8002104:	6078      	str	r0, [r7, #4]
 8002106:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8002108:	2301      	movs	r3, #1
 800210a:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_SPI_NSS(SPI_InitStruct->NSS));
  assert_param(IS_LL_SPI_BAUDRATE(SPI_InitStruct->BaudRate));
  assert_param(IS_LL_SPI_BITORDER(SPI_InitStruct->BitOrder));
  assert_param(IS_LL_SPI_CRCCALCULATION(SPI_InitStruct->CRCCalculation));

  if (LL_SPI_IsEnabled(SPIx) == 0x00000000U)
 800210c:	6878      	ldr	r0, [r7, #4]
 800210e:	f7ff ffd3 	bl	80020b8 <LL_SPI_IsEnabled>
 8002112:	4603      	mov	r3, r0
 8002114:	2b00      	cmp	r3, #0
 8002116:	d139      	bne.n	800218c <LL_SPI_Init+0x8e>
     * - NSS management:     SPI_CR1_SSM bit
     * - BaudRate prescaler: SPI_CR1_BR[2:0] bits
     * - BitOrder:           SPI_CR1_LSBFIRST bit
     * - CRCCalculation:     SPI_CR1_CRCEN bit
     */
    MODIFY_REG(SPIx->CR1,
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002120:	f023 03bf 	bic.w	r3, r3, #191	@ 0xbf
 8002124:	683a      	ldr	r2, [r7, #0]
 8002126:	6811      	ldr	r1, [r2, #0]
 8002128:	683a      	ldr	r2, [r7, #0]
 800212a:	6852      	ldr	r2, [r2, #4]
 800212c:	4311      	orrs	r1, r2
 800212e:	683a      	ldr	r2, [r7, #0]
 8002130:	6892      	ldr	r2, [r2, #8]
 8002132:	4311      	orrs	r1, r2
 8002134:	683a      	ldr	r2, [r7, #0]
 8002136:	68d2      	ldr	r2, [r2, #12]
 8002138:	4311      	orrs	r1, r2
 800213a:	683a      	ldr	r2, [r7, #0]
 800213c:	6912      	ldr	r2, [r2, #16]
 800213e:	4311      	orrs	r1, r2
 8002140:	683a      	ldr	r2, [r7, #0]
 8002142:	6952      	ldr	r2, [r2, #20]
 8002144:	4311      	orrs	r1, r2
 8002146:	683a      	ldr	r2, [r7, #0]
 8002148:	6992      	ldr	r2, [r2, #24]
 800214a:	4311      	orrs	r1, r2
 800214c:	683a      	ldr	r2, [r7, #0]
 800214e:	69d2      	ldr	r2, [r2, #28]
 8002150:	4311      	orrs	r1, r2
 8002152:	683a      	ldr	r2, [r7, #0]
 8002154:	6a12      	ldr	r2, [r2, #32]
 8002156:	430a      	orrs	r2, r1
 8002158:	431a      	orrs	r2, r3
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	601a      	str	r2, [r3, #0]

    /*---------------------------- SPIx CR2 Configuration ------------------------
     * Configure SPIx CR2 with parameters:
     * - NSS management:     SSOE bit
     */
    MODIFY_REG(SPIx->CR2, SPI_CR2_SSOE, (SPI_InitStruct->NSS >> 16U));
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	685b      	ldr	r3, [r3, #4]
 8002162:	f023 0204 	bic.w	r2, r3, #4
 8002166:	683b      	ldr	r3, [r7, #0]
 8002168:	695b      	ldr	r3, [r3, #20]
 800216a:	0c1b      	lsrs	r3, r3, #16
 800216c:	431a      	orrs	r2, r3
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	605a      	str	r2, [r3, #4]

    /*---------------------------- SPIx CRCPR Configuration ----------------------
     * Configure SPIx CRCPR with parameters:
     * - CRCPoly:            CRCPOLY[15:0] bits
     */
    if (SPI_InitStruct->CRCCalculation == LL_SPI_CRCCALCULATION_ENABLE)
 8002172:	683b      	ldr	r3, [r7, #0]
 8002174:	6a1b      	ldr	r3, [r3, #32]
 8002176:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800217a:	d105      	bne.n	8002188 <LL_SPI_Init+0x8a>
    {
      assert_param(IS_LL_SPI_CRC_POLYNOMIAL(SPI_InitStruct->CRCPoly));
      LL_SPI_SetCRCPolynomial(SPIx, SPI_InitStruct->CRCPoly);
 800217c:	683b      	ldr	r3, [r7, #0]
 800217e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002180:	4619      	mov	r1, r3
 8002182:	6878      	ldr	r0, [r7, #4]
 8002184:	f7ff ffab 	bl	80020de <LL_SPI_SetCRCPolynomial>
    }
    status = SUCCESS;
 8002188:	2300      	movs	r3, #0
 800218a:	73fb      	strb	r3, [r7, #15]
  }

  /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
  CLEAR_BIT(SPIx->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	69db      	ldr	r3, [r3, #28]
 8002190:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	61da      	str	r2, [r3, #28]
  return status;
 8002198:	7bfb      	ldrb	r3, [r7, #15]
}
 800219a:	4618      	mov	r0, r3
 800219c:	3710      	adds	r7, #16
 800219e:	46bd      	mov	sp, r7
 80021a0:	bd80      	pop	{r7, pc}

080021a2 <LL_USART_IsEnabled>:
{
 80021a2:	b480      	push	{r7}
 80021a4:	b083      	sub	sp, #12
 80021a6:	af00      	add	r7, sp, #0
 80021a8:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	68db      	ldr	r3, [r3, #12]
 80021ae:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80021b2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80021b6:	bf0c      	ite	eq
 80021b8:	2301      	moveq	r3, #1
 80021ba:	2300      	movne	r3, #0
 80021bc:	b2db      	uxtb	r3, r3
}
 80021be:	4618      	mov	r0, r3
 80021c0:	370c      	adds	r7, #12
 80021c2:	46bd      	mov	sp, r7
 80021c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c8:	4770      	bx	lr

080021ca <LL_USART_SetStopBitsLength>:
{
 80021ca:	b480      	push	{r7}
 80021cc:	b083      	sub	sp, #12
 80021ce:	af00      	add	r7, sp, #0
 80021d0:	6078      	str	r0, [r7, #4]
 80021d2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	691b      	ldr	r3, [r3, #16]
 80021d8:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80021dc:	683b      	ldr	r3, [r7, #0]
 80021de:	431a      	orrs	r2, r3
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	611a      	str	r2, [r3, #16]
}
 80021e4:	bf00      	nop
 80021e6:	370c      	adds	r7, #12
 80021e8:	46bd      	mov	sp, r7
 80021ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ee:	4770      	bx	lr

080021f0 <LL_USART_SetHWFlowCtrl>:
{
 80021f0:	b480      	push	{r7}
 80021f2:	b083      	sub	sp, #12
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
 80021f8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	695b      	ldr	r3, [r3, #20]
 80021fe:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002202:	683b      	ldr	r3, [r7, #0]
 8002204:	431a      	orrs	r2, r3
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	615a      	str	r2, [r3, #20]
}
 800220a:	bf00      	nop
 800220c:	370c      	adds	r7, #12
 800220e:	46bd      	mov	sp, r7
 8002210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002214:	4770      	bx	lr
	...

08002218 <LL_USART_SetBaudRate>:
{
 8002218:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800221c:	b0c0      	sub	sp, #256	@ 0x100
 800221e:	af00      	add	r7, sp, #0
 8002220:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8002224:	f8c7 10f8 	str.w	r1, [r7, #248]	@ 0xf8
 8002228:	f8c7 20f4 	str.w	r2, [r7, #244]	@ 0xf4
 800222c:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 8002230:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002234:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002238:	f040 810c 	bne.w	8002454 <LL_USART_SetBaudRate+0x23c>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 800223c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8002240:	2200      	movs	r2, #0
 8002242:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8002246:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800224a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800224e:	4622      	mov	r2, r4
 8002250:	462b      	mov	r3, r5
 8002252:	1891      	adds	r1, r2, r2
 8002254:	6639      	str	r1, [r7, #96]	@ 0x60
 8002256:	415b      	adcs	r3, r3
 8002258:	667b      	str	r3, [r7, #100]	@ 0x64
 800225a:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 800225e:	4621      	mov	r1, r4
 8002260:	eb12 0801 	adds.w	r8, r2, r1
 8002264:	4629      	mov	r1, r5
 8002266:	eb43 0901 	adc.w	r9, r3, r1
 800226a:	f04f 0200 	mov.w	r2, #0
 800226e:	f04f 0300 	mov.w	r3, #0
 8002272:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002276:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800227a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800227e:	4690      	mov	r8, r2
 8002280:	4699      	mov	r9, r3
 8002282:	4623      	mov	r3, r4
 8002284:	eb18 0303 	adds.w	r3, r8, r3
 8002288:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800228c:	462b      	mov	r3, r5
 800228e:	eb49 0303 	adc.w	r3, r9, r3
 8002292:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8002296:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800229a:	2200      	movs	r2, #0
 800229c:	469a      	mov	sl, r3
 800229e:	4693      	mov	fp, r2
 80022a0:	eb1a 030a 	adds.w	r3, sl, sl
 80022a4:	65bb      	str	r3, [r7, #88]	@ 0x58
 80022a6:	eb4b 030b 	adc.w	r3, fp, fp
 80022aa:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80022ac:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80022b0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80022b4:	f7fd ffa6 	bl	8000204 <__aeabi_uldivmod>
 80022b8:	4602      	mov	r2, r0
 80022ba:	460b      	mov	r3, r1
 80022bc:	4b64      	ldr	r3, [pc, #400]	@ (8002450 <LL_USART_SetBaudRate+0x238>)
 80022be:	fba3 2302 	umull	r2, r3, r3, r2
 80022c2:	095b      	lsrs	r3, r3, #5
 80022c4:	b29b      	uxth	r3, r3
 80022c6:	011b      	lsls	r3, r3, #4
 80022c8:	b29c      	uxth	r4, r3
 80022ca:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80022ce:	2200      	movs	r2, #0
 80022d0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80022d4:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80022d8:	e9d7 8936 	ldrd	r8, r9, [r7, #216]	@ 0xd8
 80022dc:	4642      	mov	r2, r8
 80022de:	464b      	mov	r3, r9
 80022e0:	1891      	adds	r1, r2, r2
 80022e2:	6539      	str	r1, [r7, #80]	@ 0x50
 80022e4:	415b      	adcs	r3, r3
 80022e6:	657b      	str	r3, [r7, #84]	@ 0x54
 80022e8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80022ec:	4641      	mov	r1, r8
 80022ee:	1851      	adds	r1, r2, r1
 80022f0:	64b9      	str	r1, [r7, #72]	@ 0x48
 80022f2:	4649      	mov	r1, r9
 80022f4:	414b      	adcs	r3, r1
 80022f6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80022f8:	f04f 0200 	mov.w	r2, #0
 80022fc:	f04f 0300 	mov.w	r3, #0
 8002300:	e9d7 ab12 	ldrd	sl, fp, [r7, #72]	@ 0x48
 8002304:	4659      	mov	r1, fp
 8002306:	00cb      	lsls	r3, r1, #3
 8002308:	4651      	mov	r1, sl
 800230a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800230e:	4651      	mov	r1, sl
 8002310:	00ca      	lsls	r2, r1, #3
 8002312:	4610      	mov	r0, r2
 8002314:	4619      	mov	r1, r3
 8002316:	4603      	mov	r3, r0
 8002318:	4642      	mov	r2, r8
 800231a:	189b      	adds	r3, r3, r2
 800231c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002320:	464b      	mov	r3, r9
 8002322:	460a      	mov	r2, r1
 8002324:	eb42 0303 	adc.w	r3, r2, r3
 8002328:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800232c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8002330:	2200      	movs	r2, #0
 8002332:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002336:	f8c7 20cc 	str.w	r2, [r7, #204]	@ 0xcc
 800233a:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800233e:	460b      	mov	r3, r1
 8002340:	18db      	adds	r3, r3, r3
 8002342:	643b      	str	r3, [r7, #64]	@ 0x40
 8002344:	4613      	mov	r3, r2
 8002346:	eb42 0303 	adc.w	r3, r2, r3
 800234a:	647b      	str	r3, [r7, #68]	@ 0x44
 800234c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8002350:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	@ 0xd0
 8002354:	f7fd ff56 	bl	8000204 <__aeabi_uldivmod>
 8002358:	4602      	mov	r2, r0
 800235a:	460b      	mov	r3, r1
 800235c:	4611      	mov	r1, r2
 800235e:	4b3c      	ldr	r3, [pc, #240]	@ (8002450 <LL_USART_SetBaudRate+0x238>)
 8002360:	fba3 2301 	umull	r2, r3, r3, r1
 8002364:	095b      	lsrs	r3, r3, #5
 8002366:	2264      	movs	r2, #100	@ 0x64
 8002368:	fb02 f303 	mul.w	r3, r2, r3
 800236c:	1acb      	subs	r3, r1, r3
 800236e:	00db      	lsls	r3, r3, #3
 8002370:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8002374:	4b36      	ldr	r3, [pc, #216]	@ (8002450 <LL_USART_SetBaudRate+0x238>)
 8002376:	fba3 2302 	umull	r2, r3, r3, r2
 800237a:	095b      	lsrs	r3, r3, #5
 800237c:	b29b      	uxth	r3, r3
 800237e:	005b      	lsls	r3, r3, #1
 8002380:	b29b      	uxth	r3, r3
 8002382:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8002386:	b29b      	uxth	r3, r3
 8002388:	4423      	add	r3, r4
 800238a:	b29c      	uxth	r4, r3
 800238c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8002390:	2200      	movs	r2, #0
 8002392:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002396:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800239a:	e9d7 8930 	ldrd	r8, r9, [r7, #192]	@ 0xc0
 800239e:	4642      	mov	r2, r8
 80023a0:	464b      	mov	r3, r9
 80023a2:	1891      	adds	r1, r2, r2
 80023a4:	63b9      	str	r1, [r7, #56]	@ 0x38
 80023a6:	415b      	adcs	r3, r3
 80023a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80023aa:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80023ae:	4641      	mov	r1, r8
 80023b0:	1851      	adds	r1, r2, r1
 80023b2:	6339      	str	r1, [r7, #48]	@ 0x30
 80023b4:	4649      	mov	r1, r9
 80023b6:	414b      	adcs	r3, r1
 80023b8:	637b      	str	r3, [r7, #52]	@ 0x34
 80023ba:	f04f 0200 	mov.w	r2, #0
 80023be:	f04f 0300 	mov.w	r3, #0
 80023c2:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80023c6:	4659      	mov	r1, fp
 80023c8:	00cb      	lsls	r3, r1, #3
 80023ca:	4651      	mov	r1, sl
 80023cc:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80023d0:	4651      	mov	r1, sl
 80023d2:	00ca      	lsls	r2, r1, #3
 80023d4:	4610      	mov	r0, r2
 80023d6:	4619      	mov	r1, r3
 80023d8:	4603      	mov	r3, r0
 80023da:	4642      	mov	r2, r8
 80023dc:	189b      	adds	r3, r3, r2
 80023de:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80023e2:	464b      	mov	r3, r9
 80023e4:	460a      	mov	r2, r1
 80023e6:	eb42 0303 	adc.w	r3, r2, r3
 80023ea:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80023ee:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80023f2:	2200      	movs	r2, #0
 80023f4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80023f8:	f8c7 20b4 	str.w	r2, [r7, #180]	@ 0xb4
 80023fc:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8002400:	460b      	mov	r3, r1
 8002402:	18db      	adds	r3, r3, r3
 8002404:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002406:	4613      	mov	r3, r2
 8002408:	eb42 0303 	adc.w	r3, r2, r3
 800240c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800240e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002412:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	@ 0xb8
 8002416:	f7fd fef5 	bl	8000204 <__aeabi_uldivmod>
 800241a:	4602      	mov	r2, r0
 800241c:	460b      	mov	r3, r1
 800241e:	4b0c      	ldr	r3, [pc, #48]	@ (8002450 <LL_USART_SetBaudRate+0x238>)
 8002420:	fba3 1302 	umull	r1, r3, r3, r2
 8002424:	095b      	lsrs	r3, r3, #5
 8002426:	2164      	movs	r1, #100	@ 0x64
 8002428:	fb01 f303 	mul.w	r3, r1, r3
 800242c:	1ad3      	subs	r3, r2, r3
 800242e:	00db      	lsls	r3, r3, #3
 8002430:	3332      	adds	r3, #50	@ 0x32
 8002432:	4a07      	ldr	r2, [pc, #28]	@ (8002450 <LL_USART_SetBaudRate+0x238>)
 8002434:	fba2 2303 	umull	r2, r3, r2, r3
 8002438:	095b      	lsrs	r3, r3, #5
 800243a:	b29b      	uxth	r3, r3
 800243c:	f003 0307 	and.w	r3, r3, #7
 8002440:	b29b      	uxth	r3, r3
 8002442:	4423      	add	r3, r4
 8002444:	b29b      	uxth	r3, r3
 8002446:	461a      	mov	r2, r3
 8002448:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800244c:	609a      	str	r2, [r3, #8]
}
 800244e:	e108      	b.n	8002662 <LL_USART_SetBaudRate+0x44a>
 8002450:	51eb851f 	.word	0x51eb851f
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8002454:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8002458:	2200      	movs	r2, #0
 800245a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800245e:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8002462:	e9d7 892a 	ldrd	r8, r9, [r7, #168]	@ 0xa8
 8002466:	4642      	mov	r2, r8
 8002468:	464b      	mov	r3, r9
 800246a:	1891      	adds	r1, r2, r2
 800246c:	6239      	str	r1, [r7, #32]
 800246e:	415b      	adcs	r3, r3
 8002470:	627b      	str	r3, [r7, #36]	@ 0x24
 8002472:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002476:	4641      	mov	r1, r8
 8002478:	1854      	adds	r4, r2, r1
 800247a:	4649      	mov	r1, r9
 800247c:	eb43 0501 	adc.w	r5, r3, r1
 8002480:	f04f 0200 	mov.w	r2, #0
 8002484:	f04f 0300 	mov.w	r3, #0
 8002488:	00eb      	lsls	r3, r5, #3
 800248a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800248e:	00e2      	lsls	r2, r4, #3
 8002490:	4614      	mov	r4, r2
 8002492:	461d      	mov	r5, r3
 8002494:	4643      	mov	r3, r8
 8002496:	18e3      	adds	r3, r4, r3
 8002498:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800249c:	464b      	mov	r3, r9
 800249e:	eb45 0303 	adc.w	r3, r5, r3
 80024a2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80024a6:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80024aa:	2200      	movs	r2, #0
 80024ac:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80024b0:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 80024b4:	f04f 0200 	mov.w	r2, #0
 80024b8:	f04f 0300 	mov.w	r3, #0
 80024bc:	e9d7 4526 	ldrd	r4, r5, [r7, #152]	@ 0x98
 80024c0:	4629      	mov	r1, r5
 80024c2:	008b      	lsls	r3, r1, #2
 80024c4:	4621      	mov	r1, r4
 80024c6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80024ca:	4621      	mov	r1, r4
 80024cc:	008a      	lsls	r2, r1, #2
 80024ce:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	@ 0xa0
 80024d2:	f7fd fe97 	bl	8000204 <__aeabi_uldivmod>
 80024d6:	4602      	mov	r2, r0
 80024d8:	460b      	mov	r3, r1
 80024da:	4b65      	ldr	r3, [pc, #404]	@ (8002670 <LL_USART_SetBaudRate+0x458>)
 80024dc:	fba3 2302 	umull	r2, r3, r3, r2
 80024e0:	095b      	lsrs	r3, r3, #5
 80024e2:	b29b      	uxth	r3, r3
 80024e4:	011b      	lsls	r3, r3, #4
 80024e6:	b29c      	uxth	r4, r3
 80024e8:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80024ec:	2200      	movs	r2, #0
 80024ee:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80024f2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80024f6:	e9d7 8924 	ldrd	r8, r9, [r7, #144]	@ 0x90
 80024fa:	4642      	mov	r2, r8
 80024fc:	464b      	mov	r3, r9
 80024fe:	1891      	adds	r1, r2, r2
 8002500:	61b9      	str	r1, [r7, #24]
 8002502:	415b      	adcs	r3, r3
 8002504:	61fb      	str	r3, [r7, #28]
 8002506:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800250a:	4641      	mov	r1, r8
 800250c:	1851      	adds	r1, r2, r1
 800250e:	6139      	str	r1, [r7, #16]
 8002510:	4649      	mov	r1, r9
 8002512:	414b      	adcs	r3, r1
 8002514:	617b      	str	r3, [r7, #20]
 8002516:	f04f 0200 	mov.w	r2, #0
 800251a:	f04f 0300 	mov.w	r3, #0
 800251e:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002522:	4659      	mov	r1, fp
 8002524:	00cb      	lsls	r3, r1, #3
 8002526:	4651      	mov	r1, sl
 8002528:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800252c:	4651      	mov	r1, sl
 800252e:	00ca      	lsls	r2, r1, #3
 8002530:	4610      	mov	r0, r2
 8002532:	4619      	mov	r1, r3
 8002534:	4603      	mov	r3, r0
 8002536:	4642      	mov	r2, r8
 8002538:	189b      	adds	r3, r3, r2
 800253a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800253e:	464b      	mov	r3, r9
 8002540:	460a      	mov	r2, r1
 8002542:	eb42 0303 	adc.w	r3, r2, r3
 8002546:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800254a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800254e:	2200      	movs	r2, #0
 8002550:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002554:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8002558:	f04f 0200 	mov.w	r2, #0
 800255c:	f04f 0300 	mov.w	r3, #0
 8002560:	e9d7 8920 	ldrd	r8, r9, [r7, #128]	@ 0x80
 8002564:	4649      	mov	r1, r9
 8002566:	008b      	lsls	r3, r1, #2
 8002568:	4641      	mov	r1, r8
 800256a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800256e:	4641      	mov	r1, r8
 8002570:	008a      	lsls	r2, r1, #2
 8002572:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	@ 0x88
 8002576:	f7fd fe45 	bl	8000204 <__aeabi_uldivmod>
 800257a:	4602      	mov	r2, r0
 800257c:	460b      	mov	r3, r1
 800257e:	4611      	mov	r1, r2
 8002580:	4b3b      	ldr	r3, [pc, #236]	@ (8002670 <LL_USART_SetBaudRate+0x458>)
 8002582:	fba3 2301 	umull	r2, r3, r3, r1
 8002586:	095b      	lsrs	r3, r3, #5
 8002588:	2264      	movs	r2, #100	@ 0x64
 800258a:	fb02 f303 	mul.w	r3, r2, r3
 800258e:	1acb      	subs	r3, r1, r3
 8002590:	011b      	lsls	r3, r3, #4
 8002592:	3332      	adds	r3, #50	@ 0x32
 8002594:	4a36      	ldr	r2, [pc, #216]	@ (8002670 <LL_USART_SetBaudRate+0x458>)
 8002596:	fba2 2303 	umull	r2, r3, r2, r3
 800259a:	095b      	lsrs	r3, r3, #5
 800259c:	b29b      	uxth	r3, r3
 800259e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80025a2:	b29b      	uxth	r3, r3
 80025a4:	4423      	add	r3, r4
 80025a6:	b29c      	uxth	r4, r3
 80025a8:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80025ac:	2200      	movs	r2, #0
 80025ae:	67bb      	str	r3, [r7, #120]	@ 0x78
 80025b0:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80025b2:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80025b6:	4642      	mov	r2, r8
 80025b8:	464b      	mov	r3, r9
 80025ba:	1891      	adds	r1, r2, r2
 80025bc:	60b9      	str	r1, [r7, #8]
 80025be:	415b      	adcs	r3, r3
 80025c0:	60fb      	str	r3, [r7, #12]
 80025c2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80025c6:	4641      	mov	r1, r8
 80025c8:	1851      	adds	r1, r2, r1
 80025ca:	6039      	str	r1, [r7, #0]
 80025cc:	4649      	mov	r1, r9
 80025ce:	414b      	adcs	r3, r1
 80025d0:	607b      	str	r3, [r7, #4]
 80025d2:	f04f 0200 	mov.w	r2, #0
 80025d6:	f04f 0300 	mov.w	r3, #0
 80025da:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80025de:	4659      	mov	r1, fp
 80025e0:	00cb      	lsls	r3, r1, #3
 80025e2:	4651      	mov	r1, sl
 80025e4:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80025e8:	4651      	mov	r1, sl
 80025ea:	00ca      	lsls	r2, r1, #3
 80025ec:	4610      	mov	r0, r2
 80025ee:	4619      	mov	r1, r3
 80025f0:	4603      	mov	r3, r0
 80025f2:	4642      	mov	r2, r8
 80025f4:	189b      	adds	r3, r3, r2
 80025f6:	673b      	str	r3, [r7, #112]	@ 0x70
 80025f8:	464b      	mov	r3, r9
 80025fa:	460a      	mov	r2, r1
 80025fc:	eb42 0303 	adc.w	r3, r2, r3
 8002600:	677b      	str	r3, [r7, #116]	@ 0x74
 8002602:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8002606:	2200      	movs	r2, #0
 8002608:	66bb      	str	r3, [r7, #104]	@ 0x68
 800260a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800260c:	f04f 0200 	mov.w	r2, #0
 8002610:	f04f 0300 	mov.w	r3, #0
 8002614:	e9d7 891a 	ldrd	r8, r9, [r7, #104]	@ 0x68
 8002618:	4649      	mov	r1, r9
 800261a:	008b      	lsls	r3, r1, #2
 800261c:	4641      	mov	r1, r8
 800261e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002622:	4641      	mov	r1, r8
 8002624:	008a      	lsls	r2, r1, #2
 8002626:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 800262a:	f7fd fdeb 	bl	8000204 <__aeabi_uldivmod>
 800262e:	4602      	mov	r2, r0
 8002630:	460b      	mov	r3, r1
 8002632:	4b0f      	ldr	r3, [pc, #60]	@ (8002670 <LL_USART_SetBaudRate+0x458>)
 8002634:	fba3 1302 	umull	r1, r3, r3, r2
 8002638:	095b      	lsrs	r3, r3, #5
 800263a:	2164      	movs	r1, #100	@ 0x64
 800263c:	fb01 f303 	mul.w	r3, r1, r3
 8002640:	1ad3      	subs	r3, r2, r3
 8002642:	011b      	lsls	r3, r3, #4
 8002644:	3332      	adds	r3, #50	@ 0x32
 8002646:	4a0a      	ldr	r2, [pc, #40]	@ (8002670 <LL_USART_SetBaudRate+0x458>)
 8002648:	fba2 2303 	umull	r2, r3, r2, r3
 800264c:	095b      	lsrs	r3, r3, #5
 800264e:	b29b      	uxth	r3, r3
 8002650:	f003 030f 	and.w	r3, r3, #15
 8002654:	b29b      	uxth	r3, r3
 8002656:	4423      	add	r3, r4
 8002658:	b29b      	uxth	r3, r3
 800265a:	461a      	mov	r2, r3
 800265c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002660:	609a      	str	r2, [r3, #8]
}
 8002662:	bf00      	nop
 8002664:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8002668:	46bd      	mov	sp, r7
 800266a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800266e:	bf00      	nop
 8002670:	51eb851f 	.word	0x51eb851f

08002674 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, const LL_USART_InitTypeDef *USART_InitStruct)
{
 8002674:	b580      	push	{r7, lr}
 8002676:	b088      	sub	sp, #32
 8002678:	af00      	add	r7, sp, #0
 800267a:	6078      	str	r0, [r7, #4]
 800267c:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 800267e:	2301      	movs	r3, #1
 8002680:	77fb      	strb	r3, [r7, #31]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 8002682:	2300      	movs	r3, #0
 8002684:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 8002686:	6878      	ldr	r0, [r7, #4]
 8002688:	f7ff fd8b 	bl	80021a2 <LL_USART_IsEnabled>
 800268c:	4603      	mov	r3, r0
 800268e:	2b00      	cmp	r3, #0
 8002690:	d15e      	bne.n	8002750 <LL_USART_Init+0xdc>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	68db      	ldr	r3, [r3, #12]
 8002696:	f423 4316 	bic.w	r3, r3, #38400	@ 0x9600
 800269a:	f023 030c 	bic.w	r3, r3, #12
 800269e:	683a      	ldr	r2, [r7, #0]
 80026a0:	6851      	ldr	r1, [r2, #4]
 80026a2:	683a      	ldr	r2, [r7, #0]
 80026a4:	68d2      	ldr	r2, [r2, #12]
 80026a6:	4311      	orrs	r1, r2
 80026a8:	683a      	ldr	r2, [r7, #0]
 80026aa:	6912      	ldr	r2, [r2, #16]
 80026ac:	4311      	orrs	r1, r2
 80026ae:	683a      	ldr	r2, [r7, #0]
 80026b0:	6992      	ldr	r2, [r2, #24]
 80026b2:	430a      	orrs	r2, r1
 80026b4:	431a      	orrs	r2, r3
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	60da      	str	r2, [r3, #12]
    /*---------------------------- USART CR2 Configuration -----------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 80026ba:	683b      	ldr	r3, [r7, #0]
 80026bc:	689b      	ldr	r3, [r3, #8]
 80026be:	4619      	mov	r1, r3
 80026c0:	6878      	ldr	r0, [r7, #4]
 80026c2:	f7ff fd82 	bl	80021ca <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration -----------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 80026c6:	683b      	ldr	r3, [r7, #0]
 80026c8:	695b      	ldr	r3, [r3, #20]
 80026ca:	4619      	mov	r1, r3
 80026cc:	6878      	ldr	r0, [r7, #4]
 80026ce:	f7ff fd8f 	bl	80021f0 <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration -----------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 80026d2:	f107 0308 	add.w	r3, r7, #8
 80026d6:	4618      	mov	r0, r3
 80026d8:	f7ff fbf4 	bl	8001ec4 <LL_RCC_GetSystemClocksFreq>
    if (USARTx == USART1)
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	4a1f      	ldr	r2, [pc, #124]	@ (800275c <LL_USART_Init+0xe8>)
 80026e0:	4293      	cmp	r3, r2
 80026e2:	d102      	bne.n	80026ea <LL_USART_Init+0x76>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 80026e4:	697b      	ldr	r3, [r7, #20]
 80026e6:	61bb      	str	r3, [r7, #24]
 80026e8:	e021      	b.n	800272e <LL_USART_Init+0xba>
    }
    else if (USARTx == USART2)
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	4a1c      	ldr	r2, [pc, #112]	@ (8002760 <LL_USART_Init+0xec>)
 80026ee:	4293      	cmp	r3, r2
 80026f0:	d102      	bne.n	80026f8 <LL_USART_Init+0x84>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 80026f2:	693b      	ldr	r3, [r7, #16]
 80026f4:	61bb      	str	r3, [r7, #24]
 80026f6:	e01a      	b.n	800272e <LL_USART_Init+0xba>
    }
#if defined(USART3)
    else if (USARTx == USART3)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	4a1a      	ldr	r2, [pc, #104]	@ (8002764 <LL_USART_Init+0xf0>)
 80026fc:	4293      	cmp	r3, r2
 80026fe:	d102      	bne.n	8002706 <LL_USART_Init+0x92>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8002700:	693b      	ldr	r3, [r7, #16]
 8002702:	61bb      	str	r3, [r7, #24]
 8002704:	e013      	b.n	800272e <LL_USART_Init+0xba>
    }
#endif /* USART3 */
#if defined(USART6)
    else if (USARTx == USART6)
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	4a17      	ldr	r2, [pc, #92]	@ (8002768 <LL_USART_Init+0xf4>)
 800270a:	4293      	cmp	r3, r2
 800270c:	d102      	bne.n	8002714 <LL_USART_Init+0xa0>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 800270e:	697b      	ldr	r3, [r7, #20]
 8002710:	61bb      	str	r3, [r7, #24]
 8002712:	e00c      	b.n	800272e <LL_USART_Init+0xba>
    }
#endif /* USART6 */
#if defined(UART4)
    else if (USARTx == UART4)
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	4a15      	ldr	r2, [pc, #84]	@ (800276c <LL_USART_Init+0xf8>)
 8002718:	4293      	cmp	r3, r2
 800271a:	d102      	bne.n	8002722 <LL_USART_Init+0xae>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 800271c:	693b      	ldr	r3, [r7, #16]
 800271e:	61bb      	str	r3, [r7, #24]
 8002720:	e005      	b.n	800272e <LL_USART_Init+0xba>
    }
#endif /* UART4 */
#if defined(UART5)
    else if (USARTx == UART5)
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	4a12      	ldr	r2, [pc, #72]	@ (8002770 <LL_USART_Init+0xfc>)
 8002726:	4293      	cmp	r3, r2
 8002728:	d101      	bne.n	800272e <LL_USART_Init+0xba>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 800272a:	693b      	ldr	r3, [r7, #16]
 800272c:	61bb      	str	r3, [r7, #24]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 800272e:	69bb      	ldr	r3, [r7, #24]
 8002730:	2b00      	cmp	r3, #0
 8002732:	d00d      	beq.n	8002750 <LL_USART_Init+0xdc>
        && (USART_InitStruct->BaudRate != 0U))
 8002734:	683b      	ldr	r3, [r7, #0]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	2b00      	cmp	r3, #0
 800273a:	d009      	beq.n	8002750 <LL_USART_Init+0xdc>
    {
      status = SUCCESS;
 800273c:	2300      	movs	r3, #0
 800273e:	77fb      	strb	r3, [r7, #31]
      LL_USART_SetBaudRate(USARTx,
                           periphclk,
                           USART_InitStruct->OverSampling,
 8002740:	683b      	ldr	r3, [r7, #0]
 8002742:	699a      	ldr	r2, [r3, #24]
                           USART_InitStruct->BaudRate);
 8002744:	683b      	ldr	r3, [r7, #0]
 8002746:	681b      	ldr	r3, [r3, #0]
      LL_USART_SetBaudRate(USARTx,
 8002748:	69b9      	ldr	r1, [r7, #24]
 800274a:	6878      	ldr	r0, [r7, #4]
 800274c:	f7ff fd64 	bl	8002218 <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MIN(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 8002750:	7ffb      	ldrb	r3, [r7, #31]
}
 8002752:	4618      	mov	r0, r3
 8002754:	3720      	adds	r7, #32
 8002756:	46bd      	mov	sp, r7
 8002758:	bd80      	pop	{r7, pc}
 800275a:	bf00      	nop
 800275c:	40011000 	.word	0x40011000
 8002760:	40004400 	.word	0x40004400
 8002764:	40004800 	.word	0x40004800
 8002768:	40011400 	.word	0x40011400
 800276c:	40004c00 	.word	0x40004c00
 8002770:	40005000 	.word	0x40005000

08002774 <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Frequency of Ticks (Hz)
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 8002774:	b480      	push	{r7}
 8002776:	b083      	sub	sp, #12
 8002778:	af00      	add	r7, sp, #0
 800277a:	6078      	str	r0, [r7, #4]
 800277c:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 800277e:	687a      	ldr	r2, [r7, #4]
 8002780:	683b      	ldr	r3, [r7, #0]
 8002782:	fbb2 f3f3 	udiv	r3, r2, r3
 8002786:	4a07      	ldr	r2, [pc, #28]	@ (80027a4 <LL_InitTick+0x30>)
 8002788:	3b01      	subs	r3, #1
 800278a:	6053      	str	r3, [r2, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 800278c:	4b05      	ldr	r3, [pc, #20]	@ (80027a4 <LL_InitTick+0x30>)
 800278e:	2200      	movs	r2, #0
 8002790:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002792:	4b04      	ldr	r3, [pc, #16]	@ (80027a4 <LL_InitTick+0x30>)
 8002794:	2205      	movs	r2, #5
 8002796:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 8002798:	bf00      	nop
 800279a:	370c      	adds	r7, #12
 800279c:	46bd      	mov	sp, r7
 800279e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a2:	4770      	bx	lr
 80027a4:	e000e010 	.word	0xe000e010

080027a8 <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 80027a8:	b580      	push	{r7, lr}
 80027aa:	b082      	sub	sp, #8
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 80027b0:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80027b4:	6878      	ldr	r0, [r7, #4]
 80027b6:	f7ff ffdd 	bl	8002774 <LL_InitTick>
}
 80027ba:	bf00      	nop
 80027bc:	3708      	adds	r7, #8
 80027be:	46bd      	mov	sp, r7
 80027c0:	bd80      	pop	{r7, pc}
	...

080027c4 <LL_mDelay>:
  *         will configure Systick to 1ms
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
void LL_mDelay(uint32_t Delay)
{
 80027c4:	b480      	push	{r7}
 80027c6:	b085      	sub	sp, #20
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	6078      	str	r0, [r7, #4]
  __IO uint32_t  tmp = SysTick->CTRL;  /* Clear the COUNTFLAG first */
 80027cc:	4b0f      	ldr	r3, [pc, #60]	@ (800280c <LL_mDelay+0x48>)
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	60fb      	str	r3, [r7, #12]
  /* Add this code to indicate that local variable is not used */
  ((void)tmp);
 80027d2:	68fb      	ldr	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if(Delay < LL_MAX_DELAY)
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027da:	d00c      	beq.n	80027f6 <LL_mDelay+0x32>
  {
    Delay++;
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	3301      	adds	r3, #1
 80027e0:	607b      	str	r3, [r7, #4]
  }

  while (Delay)
 80027e2:	e008      	b.n	80027f6 <LL_mDelay+0x32>
  {
    if((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) != 0U)
 80027e4:	4b09      	ldr	r3, [pc, #36]	@ (800280c <LL_mDelay+0x48>)
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d002      	beq.n	80027f6 <LL_mDelay+0x32>
    {
      Delay--;
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	3b01      	subs	r3, #1
 80027f4:	607b      	str	r3, [r7, #4]
  while (Delay)
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d1f3      	bne.n	80027e4 <LL_mDelay+0x20>
    }
  }
}
 80027fc:	bf00      	nop
 80027fe:	bf00      	nop
 8002800:	3714      	adds	r7, #20
 8002802:	46bd      	mov	sp, r7
 8002804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002808:	4770      	bx	lr
 800280a:	bf00      	nop
 800280c:	e000e010 	.word	0xe000e010

08002810 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 8002810:	b480      	push	{r7}
 8002812:	b083      	sub	sp, #12
 8002814:	af00      	add	r7, sp, #0
 8002816:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8002818:	4a04      	ldr	r2, [pc, #16]	@ (800282c <LL_SetSystemCoreClock+0x1c>)
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	6013      	str	r3, [r2, #0]
}
 800281e:	bf00      	nop
 8002820:	370c      	adds	r7, #12
 8002822:	46bd      	mov	sp, r7
 8002824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002828:	4770      	bx	lr
 800282a:	bf00      	nop
 800282c:	20000000 	.word	0x20000000

08002830 <memset>:
 8002830:	4402      	add	r2, r0
 8002832:	4603      	mov	r3, r0
 8002834:	4293      	cmp	r3, r2
 8002836:	d100      	bne.n	800283a <memset+0xa>
 8002838:	4770      	bx	lr
 800283a:	f803 1b01 	strb.w	r1, [r3], #1
 800283e:	e7f9      	b.n	8002834 <memset+0x4>

08002840 <__libc_init_array>:
 8002840:	b570      	push	{r4, r5, r6, lr}
 8002842:	4d0d      	ldr	r5, [pc, #52]	@ (8002878 <__libc_init_array+0x38>)
 8002844:	4c0d      	ldr	r4, [pc, #52]	@ (800287c <__libc_init_array+0x3c>)
 8002846:	1b64      	subs	r4, r4, r5
 8002848:	10a4      	asrs	r4, r4, #2
 800284a:	2600      	movs	r6, #0
 800284c:	42a6      	cmp	r6, r4
 800284e:	d109      	bne.n	8002864 <__libc_init_array+0x24>
 8002850:	4d0b      	ldr	r5, [pc, #44]	@ (8002880 <__libc_init_array+0x40>)
 8002852:	4c0c      	ldr	r4, [pc, #48]	@ (8002884 <__libc_init_array+0x44>)
 8002854:	f000 f818 	bl	8002888 <_init>
 8002858:	1b64      	subs	r4, r4, r5
 800285a:	10a4      	asrs	r4, r4, #2
 800285c:	2600      	movs	r6, #0
 800285e:	42a6      	cmp	r6, r4
 8002860:	d105      	bne.n	800286e <__libc_init_array+0x2e>
 8002862:	bd70      	pop	{r4, r5, r6, pc}
 8002864:	f855 3b04 	ldr.w	r3, [r5], #4
 8002868:	4798      	blx	r3
 800286a:	3601      	adds	r6, #1
 800286c:	e7ee      	b.n	800284c <__libc_init_array+0xc>
 800286e:	f855 3b04 	ldr.w	r3, [r5], #4
 8002872:	4798      	blx	r3
 8002874:	3601      	adds	r6, #1
 8002876:	e7f2      	b.n	800285e <__libc_init_array+0x1e>
 8002878:	080028c0 	.word	0x080028c0
 800287c:	080028c0 	.word	0x080028c0
 8002880:	080028c0 	.word	0x080028c0
 8002884:	080028c4 	.word	0x080028c4

08002888 <_init>:
 8002888:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800288a:	bf00      	nop
 800288c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800288e:	bc08      	pop	{r3}
 8002890:	469e      	mov	lr, r3
 8002892:	4770      	bx	lr

08002894 <_fini>:
 8002894:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002896:	bf00      	nop
 8002898:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800289a:	bc08      	pop	{r3}
 800289c:	469e      	mov	lr, r3
 800289e:	4770      	bx	lr
